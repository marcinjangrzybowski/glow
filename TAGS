
all-glow.ss,42
;; -*- Gerbil -*-:mukn/glow/all-glow1,0

cardano/haskell-types/client.ss,952
(export #t):mukn/glow/cardano/haskell-types/client1,0
(define-type GlowValueRefGlowValueRef11,210
(define-type ExpressionExpression18,350
(define-type SignatureSignature27,672
(define-type StatementStatement33,793
(define-type ExecutionPoint ByteString)ExecutionPoint52,1529
(define-type GlowValueGlowValue56,1624
(define-type LedgerBytesLedgerBytes68,1986
(define-type SExprString String)SExprString74,2120
(define-type GlowContract (Map ExecutionPoint -> (Tuple (List Statement) (Maybe ExecutionPoint))))GlowContract78,2211
(define-type VariableMap (Map ByteString -> GlowValue))VariableMap82,2367
(define-type PubKeyPubKey86,2550
(define-type DatatypeMap (Map ByteString -> (List (Tuple ByteString Integer))))DatatypeMap92,2668
(define-type RawMoveParamsRawMoveParams96,2814
(define-type RawCreateParamsRawCreateParams103,2983
(define-type MoveParamsMoveParams111,3183
(define-type CreateParamsCreateParams118,3340

cardano/haskell-types/data.ss,924
(export #t):mukn/glow/cardano/haskell-types/data1,0
(define-type LedgerBytesLedgerBytes11,283
(define-type SignatureSignature17,483
(define-type PubKeyPubKey23,676
(define-type GlowValueRefGlowValueRef29,795
(define-type ExpressionExpression36,935
(define-type GlowValueGlowValue45,1182
(define-type StatementStatement57,1468
(define-type SlotSlot76,2267
(define-type ExecutionPoint ByteString)ExecutionPoint82,2380
(define-type DatatypeMap (Map ByteString -> (List (Tuple ByteString Integer))))DatatypeMap86,2477
(define-type FunctionMap (Map ByteString -> (Tuple ByteString (List Statement))))FunctionMap90,2614
(define-type VariableMap (Map ByteString -> GlowValue))VariableMap94,2753
(define-type GlowContract (Map ExecutionPoint -> (Tuple (List Statement) (Maybe ExecutionPoint))))GlowContract98,2867
(define-type GlowRedeemerGlowRedeemer102,3024
(define-type GlowDatumGlowDatum108,3167

cardano/haskell-types/transaction.ss,1280
(export #t):mukn/glow/cardano/haskell-types/transaction1,0
(define-type Closure Bool)Closure10,238
(define-type ExtendedExtended14,396
(define-type ValidatorHashValidatorHash22,612
(define-type PubKeyHashPubKeyHash28,811
(define-type UpperBoundUpperBound34,1012
(define-type LowerBoundLowerBound41,1229
(define-type StakingCredentialStakingCredential48,1455
(define-type CredentialCredential55,1706
(define-type RedeemerRedeemer62,1938
(define-type ValidatorValidator68,2127
(define-type TxIdTxId74,2312
(define-type DataData80,2475
(define-type LedgerBytesLedgerBytes90,2762
(define-type SlotSlot96,2955
(define-type IntervalInterval102,3139
(define-type TokenNameTokenName109,3350
(define-type CurrencySymbolCurrencySymbol115,3549
(define-type AddressAddress121,3753
(define-type TxInTypeTxInType128,4005
(define-type TxOutRefTxOutRef135,4254
(define-type DatumDatum142,4465
(define-type DatumHashDatumHash148,4648
(define-type SignatureSignature154,4842
(define-type PubKeyPubKey160,5035
(define-type MonetaryPolicyMonetaryPolicy166,5232
(define-type SlotRange (Interval Slot))SlotRange172,5432
(define-type ValueValue176,5597
(define-type TxOutTxOut182,5817
(define-type TxInTxIn190,6061
(define-type TxTx197,6267

cardano/plutus.ss,338
(export #t):mukn/glow/cardano/plutus1,0
(defvalues (default-version)default-version5,35
(def (program version body)program8,84
(def (con x)con12,151
(def (lam x body)lam15,177
(def (delay x)delay18,213
(def (apply x y)apply21,243
(def (force x)force24,270
(def (error)error27,300
(def (addInteger x y)addInteger30,326

cardano/poo-extensions.ss,203
(export #t):mukn/glow/cardano/poo-extensions1,0
(define-type ByteString Bytes)ByteString6,88
(define-type Script ByteString)Script7,119
(define-type Int Integer)Int8,151
(def Set List)Set9,177

cardano/smart-contract-backend.ss,1786
; Interfaces to the Plutus Platform's smart contract backend.:mukn/glow/cardano/smart-contract-backend1,0
(def (glow-contract:create uuid contract-code variable-map)glow-contract:create14,665
(def (glow-contract:move uuid variable-map entry-point)glow-contract:move21,975
(def (glow-contract:wait uuid)glow-contract:wait27,1240
(def (glow-contract:extract uuid variable-name)glow-contract:extract30,1310
(def (run-migrate)run-migrate34,1430
(def (run-all-servers)run-all-servers38,1522
(def (run-node-server)run-node-server42,1640
(def (run-wallet-server)run-wallet-server46,1760
(def (run-chain-index)run-chain-index50,1852
(def (run-signing-process)run-signing-process54,1944
(def (install-contract path)install-contract58,2049
(def (installed-contracts)installed-contracts62,2163
(def (activate-contract path)activate-contract66,2261
(def (activate-contract-cli path)activate-contract-cli73,2501
(def (active-contracts)active-contracts77,2618
(def (update-contract uuid endpoint json)update-contract81,2708
(def (update-contract-cli uuid endpoint json)update-contract-cli86,2868
(def (contract-state uuid)contract-state90,3011
(def (contract-history uuid)contract-history94,3120
(def (process-contract-inbox uuid)process-contract-inbox98,3239
(def (process-contract-outboxes)process-contract-outboxes102,3357
(def scb-logger (json-run-logger "scb"))scb-logger105,3439
(def (make-url path)make-url107,3481
(defvalues (base-url)base-url110,3536
(def (run-contract-command cmd args)run-contract-command114,3598
(def (run-plutus-scb-server cmd)run-plutus-scb-server117,3696
(def (run-plutus-scb-command cmd)run-plutus-scb-command125,3936
(def (to-hash-table obj)to-hash-table131,4102
(def (make-pairs a-list)make-pairs141,4367

cardano/util.ss,379
(export #t):mukn/glow/cardano/util1,0
(def (list->json-string l)list->json-string6,57
(def (struct->hash-table a-struct) #f)struct->hash-table9,131
(def (webserver-get url params: (params []) response-parser: (response-parser (cut identity <>)))webserver-get11,171
(def (webserver-post url data response-parser: (response-parser (cut identity <>)))webserver-post14,336

cardano/wallet.ss,7396
; Derived from https://input-output-hk.github.io/cardano-wallet/api/edge/:mukn/glow/cardano/wallet1,0
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet::t14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet?14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)make-wallet14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-id14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-address-pool-gap14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-balance14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-delegation14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-name14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-passphrase14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-state14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-tip14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-id-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-address-pool-gap-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-balance-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-delegation-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-name-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-passphrase-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-state-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet-tip-set!14,301
(defstruct wallet (id address-pool-gap balance delegation name passphrase state tip) transparent: #t)wallet14,301
(def (create-wallet name mnemonic-sentence passphrase mnemonic-second-factor: (mnemonic-second-factor #f) address-pool-gap: (address-pool-gap #f))create-wallet17,420
(def (list-wallets)list-wallets26,782
(def (get-wallet id)get-wallet31,926
(defstruct address (id state) transparent: #t)address::t40,1156
(defstruct address (id state) transparent: #t)address?40,1156
(defstruct address (id state) transparent: #t)make-address40,1156
(defstruct address (id state) transparent: #t)address-id40,1156
(defstruct address (id state) transparent: #t)address-state40,1156
(defstruct address (id state) transparent: #t)address-id-set!40,1156
(defstruct address (id state) transparent: #t)address-state-set!40,1156
(defstruct address (id state) transparent: #t)address40,1156
(def (hash-table->address a-hash-table)hash-table->address42,1204
(def (list-addresses wallet-id state: (state #f))list-addresses46,1358
(defstruct payment (address amount) transparent: #t)payment::t58,1706
(defstruct payment (address amount) transparent: #t)payment?58,1706
(defstruct payment (address amount) transparent: #t)make-payment58,1706
(defstruct payment (address amount) transparent: #t)payment-address58,1706
(defstruct payment (address amount) transparent: #t)payment-amount58,1706
(defstruct payment (address amount) transparent: #t)payment-address-set!58,1706
(defstruct payment (address amount) transparent: #t)payment-amount-set!58,1706
(defstruct payment (address amount) transparent: #t)payment58,1706
(def (payment->hash-table a-payment)payment->hash-table60,1760
(defstruct amount (quantity unit) transparent: #t)amount::t68,2016
(defstruct amount (quantity unit) transparent: #t)amount?68,2016
(defstruct amount (quantity unit) transparent: #t)make-amount68,2016
(defstruct amount (quantity unit) transparent: #t)amount-quantity68,2016
(defstruct amount (quantity unit) transparent: #t)amount-unit68,2016
(defstruct amount (quantity unit) transparent: #t)amount-quantity-set!68,2016
(defstruct amount (quantity unit) transparent: #t)amount-unit-set!68,2016
(defstruct amount (quantity unit) transparent: #t)amount68,2016
(def (amount->hash-table an-amount)amount->hash-table70,2068
(def (estimate-transaction-fee wallet-id payments withdrawal: (withdrawal #f) metadata: (metadata #f))estimate-transaction-fee78,2282
(def (create-transaction wallet-id payments passphrase withdrawal: (withdrawal #f) metadata: (metadata #f))create-transaction87,2680
(def (list-transactions wallet-id)list-transactions96,3104
(def (get-transaction wallet-id transaction-id)get-transaction100,3268
(def (confirm-transaction wallet-id transaction-id)confirm-transaction107,3452
(def wallet-logger (json-run-logger "wallet"))wallet-logger118,3901
(def (make-url path)make-url120,3949
(defvalues (base-url)base-url123,4004
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys::t128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys?128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)make-payment-keys128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys-public-key128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys-private-key128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys-public-key-set!128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys-private-key-set!128,4192
(defstruct payment-keys (public-key private-key) transparent: #t)payment-keys128,4192
(defstruct key (type description cbor-hex) transparent: #t)key::t129,4258
(defstruct key (type description cbor-hex) transparent: #t)key?129,4258
(defstruct key (type description cbor-hex) transparent: #t)make-key129,4258
(defstruct key (type description cbor-hex) transparent: #t)key-type129,4258
(defstruct key (type description cbor-hex) transparent: #t)key-description129,4258
(defstruct key (type description cbor-hex) transparent: #t)key-cbor-hex129,4258
(defstruct key (type description cbor-hex) transparent: #t)key-type-set!129,4258
(defstruct key (type description cbor-hex) transparent: #t)key-description-set!129,4258
(defstruct key (type description cbor-hex) transparent: #t)key-cbor-hex-set!129,4258
(defstruct key (type description cbor-hex) transparent: #t)key129,4258
(def (json-object->key json-key)json-object->key131,4319
(def (create-payment-keys)create-payment-keys134,4455
(def (create-payment-address payment-keys)create-payment-address148,5061
(def (init-wallet-contract-instance-1)init-wallet-contract-instance-1164,5609
(def (init-wallet-contract-instance-2)init-wallet-contract-instance-2170,5928

cli/contacts.ss,696
(export #t):mukn/glow/cli/contacts1,0
(define-type ContactContact13,593
(def ContactList (Map String -> Contact))ContactList25,941
(def (default-contacts-file) (xdg-config-home "glow" "contacts.json"))default-contacts-file27,984
(def (load-contacts.json contacts-file)load-contacts.json29,1056
(def (load-contacts.db)load-contacts.db36,1360
(def (load-contacts contacts-file)load-contacts46,1718
(def options/contactsoptions/contacts51,1860
(define-entry-point (add-contactadd-contact55,1964
(define-entry-point (remove-contactremove-contact77,2790
(define-entry-point (list-contactslist-contacts93,3447
(define-entry-point (list-identities . args)list-identities118,4557

cli/ethereum.ss,231
(export #t):mukn/glow/cli/ethereum1,0
(define-entry-point (transfertransfer18,633
(define-entry-point (faucetfaucet46,2427
(def options/erc20options/erc2095,4955
(define-entry-point ($erc20-transfer$erc20-transfer99,5099

cli/identities.ss,314
(export #t):mukn/glow/cli/identities1,0
(define-type IdentityIdentity19,975
(def options/identitiesoptions/identities82,4698
(define-entry-point (add-identityadd-identity89,5035
(define-entry-point (generate-identitygenerate-identity117,6346
(define-entry-point (remove-identityremove-identity137,7134

cli/interaction.ss,1763
(export #t):mukn/glow/cli/interaction1,0
(def (ask-option name options)ask-option21,1253
(def (ask-number default-number: (default-number #f) prompt)ask-number58,2661
(def (ask-address name)ask-address66,2919
(def (ask-asset name network)ask-asset76,3251
(def (display-prompt name)display-prompt84,3592
(def (ask-application)ask-application89,3699
(def (ask-interaction interactions)ask-interaction93,3815
(def (get-or-ask-participants participants selected-identity selected-role role-names contacts)get-or-ask-participants102,4025
(def (get-or-ask-assets assets asset-names network)get-or-ask-assets116,4614
(def (console-input type name tag)console-input125,4902
(def (ask-parameter type surface-name)ask-parameter139,5323
(def (get-or-ask-parameters parameters program parameter-names)get-or-ask-parameters142,5403
(def (print-command agreement)print-command154,5791
(def (ask-role options role-names)ask-role164,6212
(def (ask-identity options)ask-identity169,6337
(def (relative-to x y)relative-to180,6710
(def (ask-max-initial-block options current-block-number)ask-max-initial-block196,7426
(def (compile-contract contract.glow)compile-contract208,7917
(def (extract-application-source-path application-name)extract-application-source-path214,8217
(define-entry-point (start-interactionstart-interaction220,8462
(def (string->json-participant-map str)string->json-participant-map295,12497
(def (string->json-asset-map str)string->json-asset-map301,12669
(def (start-interaction/with-agreement options agreement)start-interaction/with-agreement308,12954
(def (start-interaction/generate-agreement options contacts)start-interaction/generate-agreement319,13626
(def (flush-input port)flush-input384,16358

cli/utils.ss,190
(export #t):mukn/glow/cli/utils1,0
(def (display-prompt name)display-prompt7,299
(def (ask-string name)ask-string12,406
(def (get-or-ask options option ask-function)get-or-ask19,543

compiler/alpha-convert/alpha-convert.ss,2533
(export #t read-alpha-back-table write-alpha-back-table alpha-back-table=?):mukn/glow/compiler/alpha-convert/alpha-convert1,0
(def (identifier-refer env id)identifier-refer26,931
(def keyword-symskeyword-syms30,1038
(def init-symsinit-syms46,1679
(def (alpha-convert module)alpha-convert55,2036
(def (alpha-convert-type env stx)alpha-convert-type73,2851
(def (alpha-convert-expr env stx)alpha-convert-expr87,3537
(def (ac-expr-dot env stx e fld)ac-expr-dot137,5917
(def (intro-app stx)intro-app146,6333
(def (intro-app-ctor stx)intro-app-ctor152,6540
(def (intro-var-pat stx) (restx1 stx [(restx1 stx '@var-pat) stx]))intro-var-pat157,6732
(def (alpha-convert-keyword/sub-exprs env stx)alpha-convert-keyword/sub-exprs163,7080
(def (alpha-convert-deposit-withdraw env stx)alpha-convert-deposit-withdraw167,7263
(def (alpha-convert-body env body)alpha-convert-body181,7870
(def (ac-expr-function env stx)ac-expr-function185,8021
(def (ac-function-params env stx)ac-function-params202,8834
(def (ac-function-param env stx)ac-function-param214,9338
(def (ac-switch-case env stx)ac-switch-case228,9892
(def (alpha-convert-stmts env stmts)alpha-convert-stmts239,10361
(def (alpha-convert-stmt env stx)alpha-convert-stmt249,10855
(def (ac-stmt-atinteraction env stx)ac-stmt-atinteraction270,12085
(def (ac-stmt-wrap-simple-keyword env stx)ac-stmt-wrap-simple-keyword299,13525
(def (ac-stmt-at-participant env stx)ac-stmt-at-participant306,13772
(def (ac-stmt-wrap-at-keyword-participant env stx)ac-stmt-wrap-at-keyword-participant314,14110
(def (ac-stmt-splice env stx)ac-stmt-splice322,14443
(def (ac-stmt-deftype env stx)ac-stmt-deftype330,14781
(def (ac-stmt-defdata env stx)ac-stmt-defdata345,15550
(def (ac-defdata-variants env1 env2 variants)ac-defdata-variants371,16783
(def (ac-defdata-variant env stx)ac-defdata-variant382,17266
(def (ac-stmt-def env stx)ac-stmt-def399,17983
(def (ac-stmt-publish env stx)ac-stmt-publish416,18802
(def (ac-stmt-verify env stx)ac-stmt-verify425,19215
(def (alpha-convert-pat env stx)alpha-convert-pat434,19628
(def (ac-pat-var-pat env stx)ac-pat-var-pat467,21122
(def (ac-pat-app-ctor env stx)ac-pat-app-ctor476,21455
(def (ac-pat-simple-seq env stx)ac-pat-simple-seq486,21937
(def (ac-pats-meet env ps)ac-pats-meet495,22339
(def (ac-pats-join env pats)ac-pats-join508,22927
(def (pattern-variable-symbols env pat)pattern-variable-symbols529,23722
(def (symbol-list-set-intersect ls)symbol-list-set-intersect537,24142

compiler/alpha-convert/at-prefix-normalize.ss,190
(export at-head? at-prefix-normalize):mukn/glow/compiler/alpha-convert/at-prefix-normalize1,0
(def (at-head? stx)at-head?14,414
(def (at-prefix-normalize stx)at-prefix-normalize21,610

compiler/alpha-convert/env.ss,1795
(export (struct-out entry entry-val entry-ctor entry-type):mukn/glow/compiler/alpha-convert/env1,0
(defstruct entry (sym) transparent: #t)entry::t20,474
(defstruct entry (sym) transparent: #t)entry?20,474
(defstruct entry (sym) transparent: #t)make-entry20,474
(defstruct entry (sym) transparent: #t)entry-sym20,474
(defstruct entry (sym) transparent: #t)entry-sym-set!20,474
(defstruct entry (sym) transparent: #t)entry20,474
(defstruct (entry-val entry) () transparent: #t)entry-val::t21,514
(defstruct (entry-val entry) () transparent: #t)entry-val?21,514
(defstruct (entry-val entry) () transparent: #t)make-entry-val21,514
(defstruct (entry-val entry) () transparent: #t)entry-val21,514
(defstruct (entry-ctor entry) () transparent: #t)entry-ctor::t22,563
(defstruct (entry-ctor entry) () transparent: #t)entry-ctor?22,563
(defstruct (entry-ctor entry) () transparent: #t)make-entry-ctor22,563
(defstruct (entry-ctor entry) () transparent: #t)entry-ctor22,563
(defstruct (entry-type entry) () transparent: #t)entry-type::t23,613
(defstruct (entry-type entry) () transparent: #t)entry-type?23,613
(defstruct (entry-type entry) () transparent: #t)make-entry-type23,613
(defstruct (entry-type entry) () transparent: #t)entry-type23,613
(def (env-put/env e1 e2) (symdict-put/list e1 (symdict->list e2)))env-put/env27,747
(def (bound-as-ctor? env s)bound-as-ctor?30,854
(def (not-bound-as-ctor? env s)not-bound-as-ctor?35,1001
(def (bound-as-type? env s)bound-as-type?40,1158
(def (symbol-refer env s)symbol-refer46,1335
(def current-debug-label-table (make-parameter #f))current-debug-label-table52,1529
(def (make-debug-label-table) (make-hash-table-eq))make-debug-label-table53,1581
(def (add-debug-label! dlb env)add-debug-label!56,1679

compiler/alpha-convert/fresh.ss,1315
(export #t):mukn/glow/compiler/alpha-convert/fresh1,0
(def (make-unused-table) (make-hash-table-eq))make-unused-table18,507
(def current-unused-table (make-parameter (make-unused-table)))current-unused-table21,607
(define (copy-current-unused-table) (hash-copy (current-unused-table)))copy-current-unused-table24,718
(def (use/check-unused sym)use/check-unused27,828
(def (symbol-fresh sym)symbol-fresh39,1280
(def (identifier-fresh id)identifier-fresh54,1833
(def (make-alpha-back-table) (make-hash-table-eq))make-alpha-back-table67,2276
(def current-alpha-back-table (make-parameter (make-alpha-back-table)))current-alpha-back-table70,2387
(def (copy-current-alpha-back-table) (hash-copy (current-alpha-back-table)))copy-current-alpha-back-table73,2513
(def (add-alpha-back! x y)add-alpha-back!77,2671
(def (symbol-fresh* x)symbol-fresh*84,2893
(def (identifier-fresh* x)identifier-fresh*91,3079
(def (use/check-unused* x)use/check-unused*98,3267
(def (read-alpha-back-table file)read-alpha-back-table105,3460
(def (write-alpha-back-table alba out)write-alpha-back-table109,3624
(def (alpha-back-table=? a b)alpha-back-table=?113,3784
(def alpha-back-table->repr-sexpralpha-back-table->repr-sexpr118,3961
(def repr-sexpr->alpha-back-tablerepr-sexpr->alpha-back-table122,4113

compiler/alpha-convert/symbolnat.ss,387
(export #t):mukn/glow/compiler/alpha-convert/symbolnat1,0
(def (symbol-split sym)symbol-split8,149
(def (symbolnat s n)symbolnat18,513
(def (unusedlist-unused? ul n)unusedlist-unused?29,840
(def (unusedlist-first ul)unusedlist-first39,1095
(def (unusedlist-rest ul)unusedlist-rest45,1211
(def (range a b)range52,1339
(def (unusedlist-remove ul n)unusedlist-remove57,1488

compiler/anf/anf.ss,1471
(export #t):mukn/glow/compiler/anf/anf1,0
(def current-tmp (make-parameter (hash)))current-tmp50,2626
(def (tmp-var tag) (hash-ensure-ref (current-tmp) tag (cut identifier-fresh 'tmp)))tmp-var51,2668
(def (deftmp tag expr)deftmp52,2752
(def (anf-kontinue-expr k x acc)anf-kontinue-expr57,2894
(def (anf-kontinue-stmt k acc)anf-kontinue-stmt66,3188
(def (anf-stmts k stmts acc)anf-stmts78,3868
(def (anf-stmt k stx acc)anf-stmt89,4372
(def (anf-at-participant k stx)anf-at-participant102,5040
(def (anf-def stx acc)anf-def108,5260
(def (anf-arg-expr expr stmts)anf-arg-expr115,5543
(def (anf-tmpify expr stmts)anf-tmpify121,5739
(def (anf-arg-exprs exprs stmts)anf-arg-exprs129,6105
(def (anf-standalone-expr k expr)anf-standalone-expr140,6570
(def (anf-multiarg-expr stx acc)anf-multiarg-expr147,6850
(def (anf-k-multiarg-expr k stx acc)anf-k-multiarg-expr155,7201
(def (anf-k-reduced-expr k expr acc)anf-k-reduced-expr161,7469
(def (anf-k-multiarg-stmt k stx acc)anf-k-multiarg-stmt172,7929
(def (anf-expr k stx acc)anf-expr177,8130
(def (anf-k-deposit-withdraw k stx acc)anf-k-deposit-withdraw213,10046
(def (anf-body k stx acc)anf-body223,10434
(def (anf-standalone-body k stx)anf-standalone-body227,10563
(def (anf-switch-case k stx)anf-switch-case231,10682
(def (anf-lambda stx)anf-lambda237,10855
(def (anf-make-interaction k stx acc)anf-make-interaction243,11057
(def (anf module unused-table tytbl)anf250,11325

compiler/checkpointify/checkpoint-info-table.ss,280
:mukn/glow/compiler/checkpointify/checkpoint-info-table1,0
(def (read-checkpoint-info-table file)read-checkpoint-info-table25,646
(def (write-checkpoint-info-table cpit out)write-checkpoint-info-table29,830
(def (checkpoint-info-table=? a b)checkpoint-info-table=?33,1018

compiler/checkpointify/checkpointify.ss,4192
(export #t):mukn/glow/compiler/checkpointify/checkpointify1,0
(def current-checkpoint-info-table (make-parameter (make-hash-table)))current-checkpoint-info-table44,2300
(def (get-ci checkpoint) (hash-get (current-checkpoint-info-table) checkpoint))get-ci45,2371
(def (new-ci checkpoint)new-ci46,2451
(defstruct titi::t58,2913
(defstruct titi?58,2913
(defstruct timake-ti58,2913
(defstruct titi-from58,2913
(defstruct titi-to58,2913
(defstruct titi-participant58,2913
(defstruct titi-effects58,2913
(defstruct titi-variables-introduced58,2913
(defstruct titi-variables-used58,2913
(defstruct titi-variables-eliminated58,2913
(defstruct titi-from-set!58,2913
(defstruct titi-to-set!58,2913
(defstruct titi-participant-set!58,2913
(defstruct titi-effects-set!58,2913
(defstruct titi-variables-introduced-set!58,2913
(defstruct titi-variables-used-set!58,2913
(defstruct titi-variables-eliminated-set!58,2913
(defstruct titi58,2913
(def (ti-variables-publicly-introduced t) (map car (filter (compose not cdr) (ti-variables-introduced t))))ti-variables-publicly-introduced78,4586
(def (ti-variables-publicly-used t) (map car (filter (compose not cdr) (ti-variables-used t))))ti-variables-publicly-used79,4694
(def (create-ti from to participant)create-ti83,4899
(defstruct cici::t87,5073
(defstruct cici?87,5073
(defstruct cimake-ci87,5073
(defstruct cici-checkpoint87,5073
(defstruct cici-variables-live87,5073
(defstruct cici-incoming-transitions87,5073
(defstruct cici-outgoing-transitions87,5073
(defstruct cici-checkpoint-set!87,5073
(defstruct cici-variables-live-set!87,5073
(defstruct cici-incoming-transitions-set!87,5073
(defstruct cici-outgoing-transitions-set!87,5073
(defstruct cici87,5073
(def (create-ci sym)create-ci98,5756
(def (put-transition! ti)put-transition!102,5834
(def (checkpointify module unused-table)checkpointify128,6895
(def (checkpointify-scope body)checkpointify-scope137,7321
(def (make-checkpoint (label 'pc))make-checkpoint147,7627
(def (make-scope-ti)make-scope-ti154,7835
(def (make-intermediate-checkpoint tis (label 'cp))make-intermediate-checkpoint167,8587
(def (introduce-checkpoint ti acc)introduce-checkpoint183,9240
(def (statement-after-checkpoint stx ti acc ssi)statement-after-checkpoint190,9641
(def unreachable-ti (create-ti #f #f #f))unreachable-ti198,10081
(def (checkpointify-stmts stmts ti acc)checkpointify-stmts204,10348
(def unify-participantsunify-participants224,11438
(def (unify-participants/list p) (reduce unify-participants #f p))unify-participants/list231,11722
(def (participant-ambiguous? p) (eq? p #t))participant-ambiguous?232,11789
(defstruct ssissi::t235,11913
(defstruct ssissi?235,11913
(defstruct ssimake-ssi235,11913
(defstruct ssissi-participant235,11913
(defstruct ssissi-effects235,11913
(defstruct ssissi-variables-introduced235,11913
(defstruct ssissi-variables-used235,11913
(defstruct ssissi-participant-set!235,11913
(defstruct ssissi-effects-set!235,11913
(defstruct ssissi-variables-introduced-set!235,11913
(defstruct ssissi-variables-used-set!235,11913
(defstruct ssissi235,11913
(def (merge-ssi ti ssi)merge-ssi243,12185
(def (merge-ti ti ti2)merge-ti252,12629
(def (checkpointify-simple-stmt stx ti acc ssi)checkpointify-simple-stmt264,13259
(def (checkpointify-single-stmt acc ti f . args)checkpointify-single-stmt268,13469
(def (checkpointify-stmt stx ti acc)checkpointify-stmt282,14215
(def (checkpointify-publish stx)checkpointify-publish311,15902
(def (checkpointify-deposit stx)checkpointify-deposit316,16086
(def (checkpointify-body stx prefix body ti acc)checkpointify-body321,16258
(def (used<-arg e)used<-arg328,16591
(def (used<-args a)used<-args331,16731
(def (checkpointify-prefixed-expr stx ti acc prefix tail? introduced expr)checkpointify-prefixed-expr337,17069
(def (checkpointify-lambda stx)checkpointify-lambda386,19043
(def (checkpointify-make-interaction stx)checkpointify-make-interaction394,19419
(def (checkpointify-switch stx ti acc)checkpointify-switch402,19855
(def (checkpointify-swcase stx ti)checkpointify-swcase423,20788

compiler/common.ss,1976
(export #t):mukn/glow/compiler/common1,0
(def (transpose lol)transpose14,501
(def (transpose/nlist n lonl)transpose/nlist19,697
(def (format-symbol fmt . vs) (string->symbol (apply format fmt vs)))format-symbol24,871
(def (stx-atomic-literal? stx)stx-atomic-literal?27,979
(def (stx-unit? stx)stx-unit?31,1104
(def (trivial-expr? expr)trivial-expr?40,1428
(def (stx-leaf? v) (or (identifier? v) (stx-atomic-literal? v)))stx-leaf?44,1536
(def (head-id stx)head-id47,1632
(def (restx1 stx e)restx155,1926
(def (restx stx e)restx60,2069
(def (stx-sexpr=? a b) (equal? (syntax->datum a) (syntax->datum b)))stx-sexpr=?71,2480
(def (stx-sexpr=?/recur a b rec=?)stx-sexpr=?/recur76,2733
(def (stx-shallow-source=? a b) (equal? (stx-source a) (stx-source b)))stx-shallow-source=?95,3515
(def (stx-deep-source=? a b)stx-deep-source=?100,3756
(def (read-sexp-module file)read-sexp-module109,4053
(def (write-sexp-module module (port (current-output-port)))write-sexp-module117,4355
(def (write-syntax-list stxs (port (current-output-port)))write-syntax-list120,4463
(def (splice-stmts stx stmts)splice-stmts125,4707
(def (reverse-unsplice-stmts stmts (acc []))reverse-unsplice-stmts130,4970
(def (unsplice-stmts stmts)unsplice-stmts138,5329
(def (at-stx participant stx)at-stx143,5454
(def (retail-stx stx tail)retail-stx149,5591
(def (retail-stx1 stx tail)retail-stx1153,5698
(def (definition-lhs->id stx)definition-lhs->id159,5928
(def (symbol->repr-sexpr s) `',s)symbol->repr-sexpr166,6135
(def (repr-sexpr->symbol s) (match s (['quote x] x)))repr-sexpr->symbol167,6169
(def (list->repr-sexpr l v->s) `(@list ,@(map v->s l)))list->repr-sexpr171,6334
(def (repr-sexpr->list s s->v)repr-sexpr->list172,6390
(def ((hash->repr-sexpr k->s v->s k<?) h)hash->repr-sexpr179,6688
(def ((repr-sexpr->hash s->k s->v) s)repr-sexpr->hash185,6862
(defrules cond/compare (else)cond/compare197,7163
(def (sexpr<? a b)sexpr<?204,7434

compiler/debug-label/debug-label.ss,548
(export #t):mukn/glow/compiler/debug-label/debug-label1,0
(def (debug-label module)debug-label20,513
(def (debug-label-expr stx)debug-label-expr29,891
(def (debug-label-keyword/sub-exprs stx)debug-label-keyword/sub-exprs68,2970
(def (debug-label-body body)debug-label-body72,3132
(def (dl-expr-function stx)dl-expr-function84,3530
(def (dl-switch-case stx)dl-switch-case96,3944
(def (debug-label-stmts stmts)debug-label-stmts104,4183
(def (debug-label-stmt stx)debug-label-stmt116,4629
(def (dl-stmt-def stx)dl-stmt-def132,5385

compiler/desugar/desugar.ss,1361
(export #t):mukn/glow/compiler/desugar/desugar1,0
(def (desugar-stmts stmts) (unsplice-stmts (map desugar-stmt stmts)))desugar-stmts16,574
(def (desugar-stmt stx)desugar-stmt21,817
(def (desugar-def-interaction stx)desugar-def-interaction38,1710
(def (nat-to-variants variants)nat-to-variants47,2147
(def (desugar-defdata stx)desugar-defdata56,2466
(def (desugar-publish! stx)desugar-publish!86,3807
(def (desugar-deftype stx)desugar-deftype95,4179
(def current-verifications (make-parameter (make-hash-table)))current-verifications98,4214
(def (expression-verifiable? expr)expression-verifiable?100,4278
(def (computation-verification expr)computation-verification106,4509
(def (make-verification p var expr)make-verification110,4636
(def (desugar-verifiably stx p definition)desugar-verifiably117,4904
(def (verify-var var)verify-var127,5287
(def (desugar-verify vars)desugar-verify135,5584
(def (desugar-publicly stx p definition)desugar-publicly139,5701
(def (desugar-def stx)desugar-def147,6004
(def (desugar-expr stx)desugar-expr155,6254
(def (desugar-keyword/sub-exprs stx)desugar-keyword/sub-exprs194,8331
(def (desugar-body body)desugar-body198,8449
(def (desugar-switch-case stx)desugar-switch-case201,8514
(def (desugar-lambda stx)desugar-lambda204,8632
(def (desugar module unused-table)desugar214,9064

compiler/liveness/checkpoint-liveness.ss,358
:mukn/glow/compiler/liveness/checkpoint-liveness1,0
(def (checkpoint-liveness cpit)checkpoint-liveness26,844
(def (read-checkpoint-liveness-table file)read-checkpoint-liveness-table66,2600
(def (write-checkpoint-liveness-table cpit out)write-checkpoint-liveness-table70,2800
(def (checkpoint-liveness-table=? a b)checkpoint-liveness-table=?74,3008

compiler/method-resolve/method-resolve.ss,1196
(export method-resolve:mukn/glow/compiler/method-resolve/method-resolve1,0
(def (method-resolve stx unused-table)method-resolve38,1262
(def current-tysym-methods-table (make-parameter (make-tysym-methods-table)))current-tysym-methods-table59,2210
(def current-methods-id-back-table (make-parameter (make-methods-id-back-table)))current-methods-id-back-table65,2529
(def (get-tysym-methods-id sym)get-tysym-methods-id72,2806
(def (get-methods-id-back m)get-methods-id-back80,3112
(def (read-type-table-file file)read-type-table-file285,10651
(def (write-type-table tbl (port (current-output-port)))write-type-table294,11010
(def (type-table=? a b)type-table=?301,11248
(def (read-tysym-methods-table-file file)read-tysym-methods-table-file316,11689
(def (write-tysym-methods-table tbl (port (current-output-port)))write-tysym-methods-table325,12075
(def (tysym-methods-table=? a b)tysym-methods-table=?332,12331
(def (read-methods-id-back-table-file file)read-methods-id-back-table-file342,12721
(def (write-methods-id-back-table tbl (port (current-output-port)))write-methods-id-back-table351,13113
(def (methods-id-back-table=? a b)methods-id-back-table=?358,13373

compiler/multipass.ss,3305
;;;;; Compiler passes:mukn/glow/compiler/multipass1,0
(def *layers* (hash))*layers*35,2108
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer::t36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer?36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?make-layer36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer-reader36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer-writer36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer-comparer36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer-reader-set!36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer-writer-set!36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer-comparer-set!36,2130
(defstruct layer (reader writer comparer) transparent: #t) ;; defaults?layer36,2130
(def (register-layer name reader writer comparer)register-layer37,2202
(def (registered-layer name) (hash-get *layers* name))registered-layer39,2312
(defrule (define-layer name reader writer comparer) (register-layer 'name reader writer comparer))define-layer40,2367
(def *passes* (hash))*passes*49,3019
(defstruct pass (fun inputs outputs) transparent: #t)pass::t50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass?50,3041
(defstruct pass (fun inputs outputs) transparent: #t)make-pass50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass-fun50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass-inputs50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass-outputs50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass-fun-set!50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass-inputs-set!50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass-outputs-set!50,3041
(defstruct pass (fun inputs outputs) transparent: #t)pass50,3041
(def (register-pass name fun inputs outputs) (hash-put! *passes* name (pass fun inputs outputs)))register-pass51,3095
(def (registered-pass name) (hash-get *passes* name))registered-pass52,3193
(defrule (define-pass name inputs outputs) (register-pass 'name name 'inputs 'outputs))define-pass53,3247
(def *strategies* (hash))*strategies*59,3532
(def (register-strategy name passes) (hash-put! *strategies* name passes))register-strategy60,3558
(def (registered-strategy name) (hash-get *strategies* name))registered-strategy61,3633
(defrule (define-strategy name pass ...) (register-strategy 'name '(pass ...)))define-strategy62,3695
(def default-strategy (values #f))default-strategy64,3776
(def (read-file/layer layer filename)read-file/layer67,3851
(def (write/layer layer representation (port (current-output-port)))write/layer71,3981
(def (identify-layer filename)identify-layer77,4301
(def (member/take x lis)member/take93,4784
(def (relevant-passes start-layer strategy last-pass)relevant-passes102,5299
(def known-failuresknown-failures114,5901
(def (known-failure? x)known-failure?118,5950
(def (run-pass pass-name dapp-name state)run-pass129,6476
(def (run-passes dapp-pathrun-passes160,8103

compiler/parse/expressions.ss,43542
(import :drewc/smug :mukn/glow/compiler/parse/lexical :std/iter :std/misc/list):mukn/glow/compiler/parse/expressions1,0
(defstruct expression () transparent: #t)expression::t47,1617
(defstruct expression () transparent: #t)expression?47,1617
(defstruct expression () transparent: #t)make-expression47,1617
(defstruct expression () transparent: #t)expression47,1617
(defstruct statement () transparent: #t)statement::t72,2777
(defstruct statement () transparent: #t)statement?72,2777
(defstruct statement () transparent: #t)make-statement72,2777
(defstruct statement () transparent: #t)statement72,2777
(def (parse-binary-expression side op)parse-binary-expression108,4000
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression::t113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression?113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)make-binary-expression113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression-lhs113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression-op113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression-rhs113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression-lhs-set!113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression-op-set!113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression-rhs-set!113,4216
(defstruct (binary-expression expression) (lhs op rhs) transparent: #t)binary-expression113,4216
(defrules Operator ()Operator114,4288
(defstruct (identifier expression) (name) transparent: #t)identifier::t121,4473
(defstruct (identifier expression) (name) transparent: #t)identifier?121,4473
(defstruct (identifier expression) (name) transparent: #t)make-identifier121,4473
(defstruct (identifier expression) (name) transparent: #t)identifier-name121,4473
(defstruct (identifier expression) (name) transparent: #t)identifier-name-set!121,4473
(defstruct (identifier expression) (name) transparent: #t)identifier121,4473
(def IdentifierIdentifier122,4532
(defstruct (literal expression) (value) transparent: #t)literal::t128,4745
(defstruct (literal expression) (value) transparent: #t)literal?128,4745
(defstruct (literal expression) (value) transparent: #t)make-literal128,4745
(defstruct (literal expression) (value) transparent: #t)literal-value128,4745
(defstruct (literal expression) (value) transparent: #t)literal-value-set!128,4745
(defstruct (literal expression) (value) transparent: #t)literal128,4745
(defstruct (boolean-literal literal) () transparent: #t)boolean-literal::t129,4802
(defstruct (boolean-literal literal) () transparent: #t)boolean-literal?129,4802
(defstruct (boolean-literal literal) () transparent: #t)make-boolean-literal129,4802
(defstruct (boolean-literal literal) () transparent: #t)boolean-literal129,4802
(defstruct (numeric-literal literal) () transparent: #t)numeric-literal::t130,4859
(defstruct (numeric-literal literal) () transparent: #t)numeric-literal?130,4859
(defstruct (numeric-literal literal) () transparent: #t)make-numeric-literal130,4859
(defstruct (numeric-literal literal) () transparent: #t)numeric-literal130,4859
(defstruct (string-literal literal) () transparent: #t)string-literal::t131,4916
(defstruct (string-literal literal) () transparent: #t)string-literal?131,4916
(defstruct (string-literal literal) () transparent: #t)make-string-literal131,4916
(defstruct (string-literal literal) () transparent: #t)string-literal131,4916
(def LiteralLiteral133,4973
(defstruct (tuple-expression expression) (exps) transparent: #t)tuple-expression::t143,5467
(defstruct (tuple-expression expression) (exps) transparent: #t)tuple-expression?143,5467
(defstruct (tuple-expression expression) (exps) transparent: #t)make-tuple-expression143,5467
(defstruct (tuple-expression expression) (exps) transparent: #t)tuple-expression-exps143,5467
(defstruct (tuple-expression expression) (exps) transparent: #t)tuple-expression-exps-set!143,5467
(defstruct (tuple-expression expression) (exps) transparent: #t)tuple-expression143,5467
(def ParenExpressionParenExpression144,5532
(def TightExpressionTightExpression151,5788
(def PrimaryExpressionPrimaryExpression154,5908
(defstruct (arguments expression) (list) transparent: #t)arguments::t162,6177
(defstruct (arguments expression) (list) transparent: #t)arguments?162,6177
(defstruct (arguments expression) (list) transparent: #t)make-arguments162,6177
(defstruct (arguments expression) (list) transparent: #t)arguments-list162,6177
(defstruct (arguments expression) (list) transparent: #t)arguments-list-set!162,6177
(defstruct (arguments expression) (list) transparent: #t)arguments162,6177
(def ArgumentsArguments163,6235
(def ArgumentList (.begin #t (sepby1 Expression (equal-token-value? #\,))))ArgumentList170,6485
(def ArgumentsOrDotArgumentsOrDot172,6562
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression::t175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression?175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)make-unary-expression175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression-op175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression-expression175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression-op-set!175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression-expression-set!175,6647
(defstruct (unary-expression expression) (op expression) transparent: #t)unary-expression175,6647
(def UnaryExpressionUnaryExpression176,6721
(defstruct (exponentiation-expression binary-expression) () transparent: #t)exponentiation-expression::t181,6926
(defstruct (exponentiation-expression binary-expression) () transparent: #t)exponentiation-expression?181,6926
(defstruct (exponentiation-expression binary-expression) () transparent: #t)make-exponentiation-expression181,6926
(defstruct (exponentiation-expression binary-expression) () transparent: #t)exponentiation-expression181,6926
(def ExponentiationExpressionExponentiationExpression182,7003
(defstruct (multiplicative-expression binary-expression) () transparent: #t)multiplicative-expression::t185,7095
(defstruct (multiplicative-expression binary-expression) () transparent: #t)multiplicative-expression?185,7095
(defstruct (multiplicative-expression binary-expression) () transparent: #t)make-multiplicative-expression185,7095
(defstruct (multiplicative-expression binary-expression) () transparent: #t)multiplicative-expression185,7095
(def MultiplicativeExpressionMultiplicativeExpression186,7172
(def MultiplicativeOperator (.or "*" "/" "%"))MultiplicativeOperator192,7471
(defstruct (additive-expression binary-expression) () transparent: #t)additive-expression::t194,7519
(defstruct (additive-expression binary-expression) () transparent: #t)additive-expression?194,7519
(defstruct (additive-expression binary-expression) () transparent: #t)make-additive-expression194,7519
(defstruct (additive-expression binary-expression) () transparent: #t)additive-expression194,7519
(def AdditiveExpressionAdditiveExpression195,7590
(defstruct (shift-expression binary-expression) () transparent: #t)shift-expression::t201,7869
(defstruct (shift-expression binary-expression) () transparent: #t)shift-expression?201,7869
(defstruct (shift-expression binary-expression) () transparent: #t)make-shift-expression201,7869
(defstruct (shift-expression binary-expression) () transparent: #t)shift-expression201,7869
(def ShiftExpressionShiftExpression202,7937
(defstruct (relational-expression binary-expression) () transparent: #t)relational-expression::t206,8027
(defstruct (relational-expression binary-expression) () transparent: #t)relational-expression?206,8027
(defstruct (relational-expression binary-expression) () transparent: #t)make-relational-expression206,8027
(defstruct (relational-expression binary-expression) () transparent: #t)relational-expression206,8027
(def RelationalExpressionRelationalExpression207,8100
(defstruct (equality-expression binary-expression) () transparent: #t)equality-expression::t212,8216
(defstruct (equality-expression binary-expression) () transparent: #t)equality-expression?212,8216
(defstruct (equality-expression binary-expression) () transparent: #t)make-equality-expression212,8216
(defstruct (equality-expression binary-expression) () transparent: #t)equality-expression212,8216
(def EqualityExpressionEqualityExpression213,8287
(defstruct (bitwise-and-expression binary-expression) () transparent: #t)bitwise-and-expression::t218,8443
(defstruct (bitwise-and-expression binary-expression) () transparent: #t)bitwise-and-expression?218,8443
(defstruct (bitwise-and-expression binary-expression) () transparent: #t)make-bitwise-and-expression218,8443
(defstruct (bitwise-and-expression binary-expression) () transparent: #t)bitwise-and-expression218,8443
(def BitwiseANDExpressionBitwiseANDExpression219,8517
(defstruct (bitwise-xor-expression binary-expression) () transparent: #t)bitwise-xor-expression::t222,8606
(defstruct (bitwise-xor-expression binary-expression) () transparent: #t)bitwise-xor-expression?222,8606
(defstruct (bitwise-xor-expression binary-expression) () transparent: #t)make-bitwise-xor-expression222,8606
(defstruct (bitwise-xor-expression binary-expression) () transparent: #t)bitwise-xor-expression222,8606
(def BitwiseXORExpressionBitwiseXORExpression223,8680
(defstruct (bitwise-or-expression binary-expression) () transparent: #t)bitwise-or-expression::t226,8771
(defstruct (bitwise-or-expression binary-expression) () transparent: #t)bitwise-or-expression?226,8771
(defstruct (bitwise-or-expression binary-expression) () transparent: #t)make-bitwise-or-expression226,8771
(defstruct (bitwise-or-expression binary-expression) () transparent: #t)bitwise-or-expression226,8771
(def BitwiseORExpressionBitwiseORExpression227,8844
(defstruct (logical-and-expression binary-expression) () transparent: #t)logical-and-expression::t230,8933
(defstruct (logical-and-expression binary-expression) () transparent: #t)logical-and-expression?230,8933
(defstruct (logical-and-expression binary-expression) () transparent: #t)make-logical-and-expression230,8933
(defstruct (logical-and-expression binary-expression) () transparent: #t)logical-and-expression230,8933
(def LogicalANDExpressionLogicalANDExpression231,9007
(defstruct (logical-or-expression binary-expression) () transparent: #t)logical-or-expression::t234,9096
(defstruct (logical-or-expression binary-expression) () transparent: #t)logical-or-expression?234,9096
(defstruct (logical-or-expression binary-expression) () transparent: #t)make-logical-or-expression234,9096
(defstruct (logical-or-expression binary-expression) () transparent: #t)logical-or-expression234,9096
(def LogicalORExpressionLogicalORExpression235,9169
(def ConditionalExpression (.begin #t LogicalORExpression))ConditionalExpression238,9257
(def ArithmeticExpression (.begin #t ConditionalExpression))ArithmeticExpression248,9386
(defstruct attribute (id arguments)  transparent: #t)attribute::t251,9449
(defstruct attribute (id arguments)  transparent: #t)attribute?251,9449
(defstruct attribute (id arguments)  transparent: #t)make-attribute251,9449
(defstruct attribute (id arguments)  transparent: #t)attribute-id251,9449
(defstruct attribute (id arguments)  transparent: #t)attribute-arguments251,9449
(defstruct attribute (id arguments)  transparent: #t)attribute-id-set!251,9449
(defstruct attribute (id arguments)  transparent: #t)attribute-arguments-set!251,9449
(defstruct attribute (id arguments)  transparent: #t)attribute251,9449
(def AttributeAttribute253,9504
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression::t262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression?262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)make-call-expression262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression-function262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression-arguments262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression-function-set!262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression-arguments-set!262,9794
(defstruct (call-expression expression) (function arguments)  transparent: #t)call-expression262,9794
(defstruct (require-expression expression) (exp) transparent: #t)require-expression::t264,9874
(defstruct (require-expression expression) (exp) transparent: #t)require-expression?264,9874
(defstruct (require-expression expression) (exp) transparent: #t)make-require-expression264,9874
(defstruct (require-expression expression) (exp) transparent: #t)require-expression-exp264,9874
(defstruct (require-expression expression) (exp) transparent: #t)require-expression-exp-set!264,9874
(defstruct (require-expression expression) (exp) transparent: #t)require-expression264,9874
(def RequireExpressionRequireExpression265,9940
(defstruct (assert-expression identifier) () transparent: #t)assert-expression::t269,10051
(defstruct (assert-expression identifier) () transparent: #t)assert-expression?269,10051
(defstruct (assert-expression identifier) () transparent: #t)make-assert-expression269,10051
(defstruct (assert-expression identifier) () transparent: #t)assert-expression269,10051
(def AssertExpressionAssertExpression270,10113
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression::t278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression?278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)make-deposit-expression278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression-id278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression-exp278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression-id-set!278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression-exp-set!278,10334
(defstruct (deposit-expression expression) (id exp) transparent: #t)deposit-expression278,10334
(def DepositExpressionDepositExpression279,10403
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression::t283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression?283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)make-withdraw-expression283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression-id283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression-exp283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression-id-set!283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression-exp-set!283,10551
(defstruct (withdraw-expression expression) (id exp) transparent: #t)withdraw-expression283,10551
(def WithdrawExpressionWithdrawExpression284,10621
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute::t290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute?290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)make-expression-with-attribute290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute-attr290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute-expr290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute-attr-set!290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute-expr-set!290,10805
(defstruct (expression-with-attribute expression) (attr  expr) transparent: #t)expression-with-attribute290,10805
(def ExpressionWithAttributeExpressionWithAttribute291,10885
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression::t296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression?296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)make-dot-expression296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression-expr296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression-id296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression-expr-set!296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression-id-set!296,11059
(defstruct (dot-expression expression) (expr id) transparent: #t)dot-expression296,11059
(defstruct (list-expression expression) (expressions) transparent: #t)list-expression::t298,11126
(defstruct (list-expression expression) (expressions) transparent: #t)list-expression?298,11126
(defstruct (list-expression expression) (expressions) transparent: #t)make-list-expression298,11126
(defstruct (list-expression expression) (expressions) transparent: #t)list-expression-expressions298,11126
(defstruct (list-expression expression) (expressions) transparent: #t)list-expression-expressions-set!298,11126
(defstruct (list-expression expression) (expressions) transparent: #t)list-expression298,11126
(def ListExpressionListExpression299,11197
(def IdentifierTokenNameIdentifierTokenName305,11399
(defstruct type () transparent: #t)type::t310,11587
(defstruct type () transparent: #t)type?310,11587
(defstruct type () transparent: #t)make-type310,11587
(defstruct type () transparent: #t)type310,11587
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute::t311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute?311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)make-type-with-attribute311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute-attr311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute-type311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute-attr-set!311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute-type-set!311,11623
(defstruct (type-with-attribute type) (attr type) transparent: #t)type-with-attribute311,11623
(defstruct (type-name type) (id) transparent: #t)type-name::t312,11690
(defstruct (type-name type) (id) transparent: #t)type-name?312,11690
(defstruct (type-name type) (id) transparent: #t)make-type-name312,11690
(defstruct (type-name type) (id) transparent: #t)type-name-id312,11690
(defstruct (type-name type) (id) transparent: #t)type-name-id-set!312,11690
(defstruct (type-name type) (id) transparent: #t)type-name312,11690
(defstruct (type-var type) (id) transparent: #t)type-var::t313,11740
(defstruct (type-var type) (id) transparent: #t)type-var?313,11740
(defstruct (type-var type) (id) transparent: #t)make-type-var313,11740
(defstruct (type-var type) (id) transparent: #t)type-var-id313,11740
(defstruct (type-var type) (id) transparent: #t)type-var-id-set!313,11740
(defstruct (type-var type) (id) transparent: #t)type-var313,11740
(defstruct (type-tuple type) (args) transparent: #t)type-tuple::t314,11789
(defstruct (type-tuple type) (args) transparent: #t)type-tuple?314,11789
(defstruct (type-tuple type) (args) transparent: #t)make-type-tuple314,11789
(defstruct (type-tuple type) (args) transparent: #t)type-tuple-args314,11789
(defstruct (type-tuple type) (args) transparent: #t)type-tuple-args-set!314,11789
(defstruct (type-tuple type) (args) transparent: #t)type-tuple314,11789
(defstruct (type-record type) (field-args) transparent: #t)type-record::t315,11842
(defstruct (type-record type) (field-args) transparent: #t)type-record?315,11842
(defstruct (type-record type) (field-args) transparent: #t)make-type-record315,11842
(defstruct (type-record type) (field-args) transparent: #t)type-record-field-args315,11842
(defstruct (type-record type) (field-args) transparent: #t)type-record-field-args-set!315,11842
(defstruct (type-record type) (field-args) transparent: #t)type-record315,11842
(def BaseTypeBaseType316,11902
(def TypeWithAttributeTypeWithAttribute322,12098
(def BracketedTypeBracketedType326,12250
(def RecordTypeRecordType330,12485
(def RecordTypeEntryRecordTypeEntry334,12650
(def RecordTypeEntriesRecordTypeEntries337,12756
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression::t341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression?341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)make-type-annotation-expression341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression-expr341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression-typ341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression-expr-set!341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression-typ-set!341,12878
(defstruct (type-annotation-expression expression) (expr typ) transparent: #t)type-annotation-expression341,12878
(def TypeAnnotationPrimaryExpressionTypeAnnotationPrimaryExpression342,12957
(def TypeType346,13172
(def VariantVariant349,13245
(def VariantsVariants358,13549
(defstruct (record-expression expression) (entries) transparent: #t)record-expression::t362,13662
(defstruct (record-expression expression) (entries) transparent: #t)record-expression?362,13662
(defstruct (record-expression expression) (entries) transparent: #t)make-record-expression362,13662
(defstruct (record-expression expression) (entries) transparent: #t)record-expression-entries362,13662
(defstruct (record-expression expression) (entries) transparent: #t)record-expression-entries-set!362,13662
(defstruct (record-expression expression) (entries) transparent: #t)record-expression362,13662
(def RecordExprRecordExpr363,13731
(def RecordExprEntriesRecordExprEntries369,13928
(defstruct pattern () transparent: #t)pattern::t376,14150
(defstruct pattern () transparent: #t)pattern?376,14150
(defstruct pattern () transparent: #t)make-pattern376,14150
(defstruct pattern () transparent: #t)pattern376,14150
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute::t377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute?377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)make-pattern-with-attribute377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute-attr377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute-pat377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute-attr-set!377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute-pat-set!377,14189
(defstruct (pattern-with-attribute pattern) (attr pat)  transparent: #t)pattern-with-attribute377,14189
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern::t378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern?378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)make-type-annotation-pattern378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern-pat378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern-typ378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern-pat-set!378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern-typ-set!378,14262
(defstruct (type-annotation-pattern pattern) (pat typ) transparent: #t)type-annotation-pattern378,14262
(defstruct (pattern-id pattern) (id) transparent: #t)pattern-id::t380,14408
(defstruct (pattern-id pattern) (id) transparent: #t)pattern-id?380,14408
(defstruct (pattern-id pattern) (id) transparent: #t)make-pattern-id380,14408
(defstruct (pattern-id pattern) (id) transparent: #t)pattern-id-id380,14408
(defstruct (pattern-id pattern) (id) transparent: #t)pattern-id-id-set!380,14408
(defstruct (pattern-id pattern) (id) transparent: #t)pattern-id380,14408
(defstruct (pattern-blank pattern) () transparent: #t)pattern-blank::t381,14462
(defstruct (pattern-blank pattern) () transparent: #t)pattern-blank?381,14462
(defstruct (pattern-blank pattern) () transparent: #t)make-pattern-blank381,14462
(defstruct (pattern-blank pattern) () transparent: #t)pattern-blank381,14462
(defstruct (pattern-lit pattern) (lit) transparent: #t)pattern-lit::t382,14517
(defstruct (pattern-lit pattern) (lit) transparent: #t)pattern-lit?382,14517
(defstruct (pattern-lit pattern) (lit) transparent: #t)make-pattern-lit382,14517
(defstruct (pattern-lit pattern) (lit) transparent: #t)pattern-lit-lit382,14517
(defstruct (pattern-lit pattern) (lit) transparent: #t)pattern-lit-lit-set!382,14517
(defstruct (pattern-lit pattern) (lit) transparent: #t)pattern-lit382,14517
(defstruct (pattern-tuple pattern) (args) transparent: #t)pattern-tuple::t383,14573
(defstruct (pattern-tuple pattern) (args) transparent: #t)pattern-tuple?383,14573
(defstruct (pattern-tuple pattern) (args) transparent: #t)make-pattern-tuple383,14573
(defstruct (pattern-tuple pattern) (args) transparent: #t)pattern-tuple-args383,14573
(defstruct (pattern-tuple pattern) (args) transparent: #t)pattern-tuple-args-set!383,14573
(defstruct (pattern-tuple pattern) (args) transparent: #t)pattern-tuple383,14573
(defstruct (pattern-or pattern) (pats) transparent: #t)pattern-or::t384,14632
(defstruct (pattern-or pattern) (pats) transparent: #t)pattern-or?384,14632
(defstruct (pattern-or pattern) (pats) transparent: #t)make-pattern-or384,14632
(defstruct (pattern-or pattern) (pats) transparent: #t)pattern-or-pats384,14632
(defstruct (pattern-or pattern) (pats) transparent: #t)pattern-or-pats-set!384,14632
(defstruct (pattern-or pattern) (pats) transparent: #t)pattern-or384,14632
(defstruct (pattern-list pattern) (args) transparent: #t)pattern-list::t385,14688
(defstruct (pattern-list pattern) (args) transparent: #t)pattern-list?385,14688
(defstruct (pattern-list pattern) (args) transparent: #t)make-pattern-list385,14688
(defstruct (pattern-list pattern) (args) transparent: #t)pattern-list-args385,14688
(defstruct (pattern-list pattern) (args) transparent: #t)pattern-list-args-set!385,14688
(defstruct (pattern-list pattern) (args) transparent: #t)pattern-list385,14688
(defstruct (pattern-record pattern) (entries) transparent: #t)pattern-record::t386,14746
(defstruct (pattern-record pattern) (entries) transparent: #t)pattern-record?386,14746
(defstruct (pattern-record pattern) (entries) transparent: #t)make-pattern-record386,14746
(defstruct (pattern-record pattern) (entries) transparent: #t)pattern-record-entries386,14746
(defstruct (pattern-record pattern) (entries) transparent: #t)pattern-record-entries-set!386,14746
(defstruct (pattern-record pattern) (entries) transparent: #t)pattern-record386,14746
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor::t387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor?387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)make-pattern-app-ctor387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor-id387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor-args387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor-id-set!387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor-args-set!387,14809
(defstruct (pattern-app-ctor pattern) (id args) transparent: #t)pattern-app-ctor387,14809
(def BasePatternBasePattern388,14874
(def BracketedPatternBracketedPattern394,15086
(def BlockPatternBlockPattern399,15322
(def PatternWithAttributePatternWithAttribute404,15518
(def RecordPatternRecordPattern408,15681
(def RecordPatEntriesRecordPatEntries413,15860
(def TightPatternTightPattern418,16035
(def TypePatternTypePattern421,16119
(def AppCtorPatternAppCtorPattern424,16252
(def PatternVariantPatternVariant432,16575
(def PatternPattern435,16666
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression::t440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression?440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)make-body-expression440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression-statements440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression-expr440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression-statements-set!440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression-expr-set!440,16814
(defstruct (body-expression expression) (statements expr) transparent: #t)body-expression440,16814
(def BlockExpressionBlockExpression442,16890
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression::t447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression?447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)make-if-expression447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression-exp447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression-body-then447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression-body-else447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression-exp-set!447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression-body-then-set!447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression-body-else-set!447,17024
(defstruct (if-expression expression) (exp body-then body-else) transparent: #t)if-expression447,17024
(def IfExpressionIfExpression448,17105
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression::t457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression?457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)make-switch-expression457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression-expression457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression-cases457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression-expression-set!457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression-cases-set!457,17573
(defstruct (switch-expression expression) (expression cases) transparent: #t)switch-expression457,17573
(def SwitchExpressionSwitchExpression458,17651
(defstruct case (pat body) transparent: #t)case::t469,18097
(defstruct case (pat body) transparent: #t)case?469,18097
(defstruct case (pat body) transparent: #t)make-case469,18097
(defstruct case (pat body) transparent: #t)case-pat469,18097
(defstruct case (pat body) transparent: #t)case-body469,18097
(defstruct case (pat body) transparent: #t)case-pat-set!469,18097
(defstruct case (pat body) transparent: #t)case-body-set!469,18097
(defstruct case (pat body) transparent: #t)case469,18097
(def CaseCase470,18141
(def CasesCases476,18275
(def ExpressionExpression480,18373
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement::t491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement?491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)make-publish-statement491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement-id491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement-expr491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement-id-set!491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement-expr-set!491,18903
(defstruct (publish-statement statement) (id expr) transparent: #t)publish-statement491,18903
(def PublishStatementPublishStatement492,18971
(defstruct (verify-statement statement) (id) transparent: #t)verify-statement::t496,19157
(defstruct (verify-statement statement) (id) transparent: #t)verify-statement?496,19157
(defstruct (verify-statement statement) (id) transparent: #t)make-verify-statement496,19157
(defstruct (verify-statement statement) (id) transparent: #t)verify-statement-id496,19157
(defstruct (verify-statement statement) (id) transparent: #t)verify-statement-id-set!496,19157
(defstruct (verify-statement statement) (id) transparent: #t)verify-statement496,19157
(def VerifyStatementVerifyStatement497,19219
(def TyparamsTyparams501,19343
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration::t504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration?504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)make-type-alias-declaration504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration-identifier504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration-typarams504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration-typ504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration-identifier-set!504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration-typarams-set!504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration-typ-set!504,19420
(defstruct (type-alias-declaration statement) (identifier typarams typ) transparent: #t)type-alias-declaration504,19420
(def TypeAliasDeclarationTypeAliasDeclaration505,19509
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration::t512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration?512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)make-data-type-declaration512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration-identifier512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration-typarams512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration-variants512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration-identifier-set!512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration-typarams-set!512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration-variants-set!512,19796
(defstruct (data-type-declaration statement) (identifier typarams variants) transparent: #t)data-type-declaration512,19796
(def DataTypeDeclarationDataTypeDeclaration513,19889
(def SubStatementSubStatement519,20170
(defstruct (expression-statement statement) (expr) transparent: #t)expression-statement::t528,20576
(defstruct (expression-statement statement) (expr) transparent: #t)expression-statement?528,20576
(defstruct (expression-statement statement) (expr) transparent: #t)make-expression-statement528,20576
(defstruct (expression-statement statement) (expr) transparent: #t)expression-statement-expr528,20576
(defstruct (expression-statement statement) (expr) transparent: #t)expression-statement-expr-set!528,20576
(defstruct (expression-statement statement) (expr) transparent: #t)expression-statement528,20576
(def ExpressionStatement (.let* ((exp Expression) )ExpressionStatement529,20644
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition::t532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition?532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)make-value-definition532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition-identifier532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition-type532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition-expr532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition-identifier-set!532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition-type-set!532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition-expr-set!532,20736
(defstruct (value-definition statement) (identifier type expr) transparent: #t)value-definition532,20736
(def ValueDefinitionValueDefinition533,20816
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition::t542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition?542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)make-function-definition542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-identifier542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-params542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-type542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-expr542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-identifier-set!542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-params-set!542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-type-set!542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition-expr-set!542,21054
(defstruct (function-definition statement) (identifier params type expr) transparent: #t)function-definition542,21054
(def FunctionDefinitionFunctionDefinition543,21144
(def LetStatement (.begin (equal-token-value? "let") (.or FunctionDefinition  ValueDefinition)))LetStatement552,21471
(def ParamsParams554,21569
(defstruct param (id typ) transparent: #t)param::t559,21726
(defstruct param (id typ) transparent: #t)param?559,21726
(defstruct param (id typ) transparent: #t)make-param559,21726
(defstruct param (id typ) transparent: #t)param-id559,21726
(defstruct param (id typ) transparent: #t)param-typ559,21726
(defstruct param (id typ) transparent: #t)param-id-set!559,21726
(defstruct param (id typ) transparent: #t)param-typ-set!559,21726
(defstruct param (id typ) transparent: #t)param559,21726
(def ParamParam562,21812
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute::t568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute?568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)make-statement-with-attribute568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute-attribute568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute-stat568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute-attribute-set!568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute-stat-set!568,21973
(defstruct (statement-with-attribute statement) (attribute stat) transparent: #t)statement-with-attribute568,21973
(def StatementWithAttributeStatementWithAttribute569,22055
(def StatementStatement574,22224
(def StatementSemicolon (.let* ((stat Statement) (_(equal-token-value? #\;))) stat))StatementSemicolon577,22318
(def StatementList (many StatementSemicolon))StatementList578,22403
(def TopLevelStatementList (.let* ((stmts StatementList)TopLevelStatementList579,22449
(def ProgramProgram583,22609
(def BodyBody590,22871

compiler/parse/lexical.ss,6574
(export #t):mukn/glow/compiler/parse/lexical1,0
(def (sat-token-reader? p (reader token-value))sat-token-reader?8,124
(def SourceCharacter (item))SourceCharacter12,237
(def (abr code) (.char=? (if (integer? code) (integer->char code) code)))abr14,267
(def (opt p) (.or p (return #f)))opt16,342
(def ID_Start (sat char-alphabetic?))ID_Start18,377
(def ID_Continue (.or (.let* (c ID_Start) c) (sat char-numeric?) #\_))ID_Continue19,415
(def <ZWNJ> (abr #x200C)) (def <ZWJ> (abr #x200D)) (def <ZWNBSP> (abr #xFEFF))<ZWNJ>24,526
(def <ZWNJ> (abr #x200C)) (def <ZWJ> (abr #x200D)) (def <ZWNBSP> (abr #xFEFF))<ZWJ>24,526
(def <ZWNJ> (abr #x200C)) (def <ZWJ> (abr #x200D)) (def <ZWNBSP> (abr #xFEFF))<ZWNBSP>24,526
(def <TAB> (abr #\tab)) (def <VT> (abr #x000B)) (def <FF> (abr #x000C))<TAB>27,634
(def <TAB> (abr #\tab)) (def <VT> (abr #x000B)) (def <FF> (abr #x000C))<VT>27,634
(def <TAB> (abr #\tab)) (def <VT> (abr #x000B)) (def <FF> (abr #x000C))<FF>27,634
(def <SP> (abr #\space)) (def <NBSP> (abr #x00A0))<SP>28,706
(def <SP> (abr #\space)) (def <NBSP> (abr #x00A0))<NBSP>28,706
(def %ws (.or <TAB> <VT> <FF> <SP> <NBSP> <ZWNBSP>))%ws33,860
(def WhiteSpace (.begin %ws (skip %ws) (return 'WhiteSpace)))WhiteSpace34,913
(def <LF> (abr #x000A)) (def <CR> (abr #x000D))<LF>37,1007
(def <LF> (abr #x000A)) (def <CR> (abr #x000D))<CR>37,1007
(def <LS> (abr #x2028)) (def <PS> (abr #x2029))<LS>38,1055
(def <LS> (abr #x2028)) (def <PS> (abr #x2029))<PS>38,1055
(def LineTerminator (.begin (.or <LF> <CR> <LS> <PS>) (return 'LineTerminator)))LineTerminator39,1103
(def HashLang (.let* (hl "#lang") `(HashLang ,hl)))HashLang42,1186
(def RightBracePunctuator (.list (return 'RightBracePunctuator) #\}))RightBracePunctuator44,1239
(def LeftBracePunctuator (.list (return 'LeftBracePunctuator) #\{))LeftBracePunctuator45,1309
(def LeftPrenPunctuator (.list (return 'LeftPrenPunctuator) #\())LeftPrenPunctuator46,1377
(def RightPrenPunctuator (.list (return 'RightPrenPunctuator) #\)))RightPrenPunctuator47,1443
(def RightBracketPunctuator (.list (return 'RightBracketPunctuator) #\]))RightBracketPunctuator48,1511
(def LeftBracketPunctuator (.list (return 'LeftBracketPunctuator) #\[))LeftBracketPunctuator49,1585
(def Annotation (.list (return 'Annotation) #\@))Annotation50,1657
(def IdentifierNameIdentifierName53,1709
(def NonZeroDigit (sat (cut string-any <> "123456789"))) ;;NonZeroDigit58,1930
(def DigitWithZero (sat (cut string-any <> "0123456789")))DigitWithZero59,1990
(def DigitsWithZero (many1 DigitWithZero))DigitsWithZero60,2049
(def DigitIntegerLiteralDigitIntegerLiteral62,2093
(def IntegerLiteral (.let* (n (.or DigitIntegerLiteral))IntegerLiteral69,2260
(def OperatorTokenOperatorToken72,2389
(def MarkerMarker86,2810
(def ReservedWordReservedWord90,2903
(def SingleLineCommentChar (.begin (.not LineTerminator) SourceCharacter))SingleLineCommentChar98,3174
(def SingleLineCommentChars (many1 SingleLineCommentChar))SingleLineCommentChars99,3249
(def SingleLineCommentSingleLineComment101,3309
(def MultiCommentStringCharacterMultiCommentStringCharacter105,3429
(def MultiCommentStringCharacters (many MultiCommentStringCharacter))MultiCommentStringCharacters108,3496
(def MultiCommentMultiComment110,3567
(def CommentComment114,3690
(def (char-ascii? c)char-ascii?117,3773
(def (double-string-nonesc-char? c)double-string-nonesc-char?120,3844
(def DoubleStringNonescCharacter (sat double-string-nonesc-char?))DoubleStringNonescCharacter122,3931
(def (single-string-nonesc-char? c)single-string-nonesc-char?124,3999
(def SingleStringNonescCharacter (sat single-string-nonesc-char?))SingleStringNonescCharacter126,4086
(def DoubleStringEscapeSequenceDoubleStringEscapeSequence128,4154
(def SingleStringEscapeSequenceSingleStringEscapeSequence132,4253
(def DoubleStringCharacterDoubleStringCharacter136,4352
(def SingleStringCharacterSingleStringCharacter139,4446
(def DoubleStringCharacters (many DoubleStringCharacter))DoubleStringCharacters142,4540
(def SingleStringCharacters (many SingleStringCharacter))SingleStringCharacters144,4599
(def DoubleQuoteStringLiteralDoubleQuoteStringLiteral146,4658
(def SingleQuoteStringLiteralSingleQuoteStringLiteral150,4803
(def StringLiteral (.or  SingleQuoteStringLiteral  DoubleQuoteStringLiteral))StringLiteral154,4948
(def CommonTokenCommonToken156,5027
(def TokenTemplateTokenTemplate166,5228
(def (lex-error c . args)lex-error182,5547
(def GlowTokenGlowToken186,5650
(def (tokenize str) (run (many1 GlowToken) str))tokenize190,5792
(def (production? p) (or (symbol? p) (and (pair? p) (symbol? (car p)))))production?193,5843
(def (token-production t) (let (v (token-value t)) (and (production? v) v)))token-production194,5916
(def (production-type p) (and (production? p) (if (pair? p) (car p) p)))production-type195,5993
(def (production-value p) (and (production? p) (if (pair? p) (cadr p) p)))production-value196,6066
(def (token-production-type t)token-production-type197,6141
(def (get-token-value (t #f))get-token-value200,6252
(def (match-token-type? p) (token-reader? p token-production-type))match-token-type?204,6430
(def (match-token-value? p) (token-reader? p get-token-value))match-token-value?205,6498
(def (equal-token-value? v) (sat-token-reader? (cut equal? v <>) get-token-value))equal-token-value?206,6561
(def (member-token-value? l) (sat-token-reader? (cut member <> l) get-token-value))member-token-value?207,6644
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens::t210,6730
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens?210,6730
(defstruct lex-tokens (vector list) transparent: #t)make-lex-tokens210,6730
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens-vector210,6730
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens-list210,6730
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens-vector-set!210,6730
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens-list-set!210,6730
(defstruct lex-tokens (vector list) transparent: #t)lex-tokens210,6730
(defmethod (input-item (ts lex-tokens)) (input-item (String 0 ts)))input-item::lex-tokens211,6783
(defmethod (input-item-ref (t lex-tokens) (n <t>))input-item-ref::lex-tokens::<t>212,6851
(def (lexify thing (rem '(Comment WhiteSpace LineTerminator)))lexify215,6947
(def (.lex-tokens).lex-tokens220,7249
(def (next-source-tokens)next-source-tokens223,7334
(def BooleanLiteralBooleanLiteral231,7587

compiler/parse/parse.ss,114
(export parse:mukn/glow/compiler/parse/parse1,0
(def (parse in)parse9,266
(def (parseStr str)parseStr14,361

compiler/parse/t/expressions-test.ss,107
(export #t):mukn/glow/compiler/parse/t/expressions-test1,0
(def expressions-testexpressions-test11,174

compiler/parse/t/parse-test.ss,87
(export #t):mukn/glow/compiler/parse/t/parse-test1,0
(def parse-testparse-test8,84

compiler/participantify/participantify.ss,1163
(export #t):mukn/glow/compiler/participantify/participantify1,0
(def (participantify module unused-table)participantify31,1173
(def (participantify-stmts stmts participant acc)participantify-stmts54,2416
(def (participant-checkpoint stx before after)participant-checkpoint61,2669
(def unify-participantsunify-participants64,2796
(def (unify-participants/list p) (reduce unify-participants #f p))unify-participants/list71,3154
(def (participantify-stmt stx participant acc)participantify-stmt77,3485
(def (participantify-defdata stx participant)participantify-defdata110,5177
(def (participantify-body stx prefix body participant acc)participantify-body115,5297
(def (participantify-switch stx participant)participantify-switch121,5574
(def (participantify-swcase stx participant)participantify-swcase128,5915
(def (participantify-publish-deposit stx participant)participantify-publish-deposit135,6203
(def (participantify-prefixed-expr stx participant)participantify-prefixed-expr143,6527
(def (participantify-lambda stx)participantify-lambda164,7576
(def (participantify-make-interaction stx)participantify-make-interaction169,7770

compiler/passes.ss,53
;;;;; Compiler passes:mukn/glow/compiler/passes1,0

compiler/project/project.ss,920
(export #t):mukn/glow/compiler/project/project1,0
(def pure-stmt list)pure-stmt14,435
(def (project prog unused cpit)project20,659
(def (project-expr stx cpit this-p)project-expr30,1051
(def (project-make-interaction stx cpit this-p)project-make-interaction36,1278
(def (project-body stmts cpit this-p)project-body55,2057
(def (project-stmt stx cpit this-p)project-stmt59,2221
(def (project-set-participant p cpit this-p)project-set-participant81,3360
(def (project-publish stx cpit this-p)project-publish87,3576
(def (project-deposit stx cpit this-p)project-deposit96,3918
(def (project-withdraw stx cpit this-p)project-withdraw105,4249
(def (project-require stx cpit this-p)project-require113,4494
(def (project-assert stx cpit this-p)project-assert121,4841
(def (project-switch stx cpit this-p)project-switch128,5128
(def (project-switch-case stx cpit this-p)project-switch-case136,5428

compiler/project/runtime-2.ss,3124
(export #t:mukn/glow/compiler/project/runtime-21,0
(def (set-caddr!  p v) (set-car! (cddr  p) v))set-caddr!41,1196
(def (set-cadddr! p v) (set-car! (cdddr p) v))set-cadddr!42,1243
(def (message sender published asset-transfers)message46,1373
(def message-sender cadr)message-sender48,1468
(def message-published caddr)message-published49,1494
(def message-asset-transfers cadddr)message-asset-transfers50,1524
(def message-asset-transfers-set! set-cadddr!)message-asset-transfers-set!51,1561
(def (open-message-out sender)open-message-out59,1832
(def (get-output-message m)get-output-message63,1956
(def (open-message-in m)open-message-in70,2243
(def (close-message-in m)close-message-in76,2435
(def current-balances (make-thread-parameter #f))current-balances84,2840
(def current-receiving-message (make-thread-parameter #f))current-receiving-message88,2998
(def current-received-message (make-thread-parameter #f))current-received-message89,3057
(def current-in-progress-message (make-thread-parameter #f))current-in-progress-message92,3174
(def current-address (make-thread-parameter #f))current-address101,3404
(def current-input-channel (make-thread-parameter #f))current-input-channel105,3555
(def current-output-channel (make-thread-parameter #f))current-output-channel106,3610
(def (participant:set-participant p)participant:set-participant109,3716
(def (consensus:set-participant p)consensus:set-participant139,5086
(def (participant:end-interaction)participant:end-interaction154,5698
(def (consensus:end-interaction)consensus:end-interaction168,6242
(def (participant:withdraw p n)participant:withdraw179,6644
(def (consensus:withdraw p n)consensus:withdraw186,6839
(def (participant-new-in-progress-message)participant-new-in-progress-message193,7064
(def (participant-send-in-progress-message participant->consensus consensus->participant)participant-send-in-progress-message200,7453
(def (consensus-receive-message nexts participant->consensus)consensus-receive-message213,8138
(def (consensus-done-processing-message consensus->participants)consensus-done-processing-message224,8667
(def (participant-expect-message consensus->participant)participant-expect-message242,9510
(def (participant-done-processing-message)participant-done-processing-message251,9940
(def (add-to-publish x v t)add-to-publish259,10200
(def (expect-published x t)expect-published264,10377
(def (add-to-deposit n)add-to-deposit269,10539
(def (expect-deposited n)expect-deposited278,10857
(def (add-to-withdraw p n)add-to-withdraw287,11182
(def (expect-withdrawn p n)expect-withdrawn295,11483
(def (get-balance p)get-balance305,11834
(def (get-balances ps)get-balances310,11989
(def (update-balances before transfers)update-balances316,12155
(def (update-current-balances transfers)update-current-balances325,12497
(def == equal?)==330,12669
(def mod modulo)mod332,12686
(def (digest alst)digest334,12704
(def (input t s)input340,12866
(def (isValidSignature address digest signature)isValidSignature345,13065
(def (sign digest)sign349,13200

compiler/project/t/project-test.ss,358
#!/usr/bin/env gxi:mukn/glow/compiler/project/t/project-test1,0
(def (sexp-project-version file)sexp-project-version28,527
(def (project-display dapp-name)project-display33,767
(def (try-project-files dapps)try-project-files44,1213
(def (try-project-all)try-project-all57,1608
(def project-testproject-test60,1668
(def (main . args)main67,1871

compiler/syntax-context.ss,97
;; This module's purpose is to establish a common context:mukn/glow/compiler/syntax-context1,0

compiler/t/multipass-test.ss,94
(export #t):mukn/glow/compiler/t/multipass-test1,0
(def multipass-testmultipass-test8,122

compiler/t/passes-test.ss,95
(export passes-test):mukn/glow/compiler/t/passes-test1,0
(def passes-testpasses-test10,211

compiler/typecheck/stx-prop.ss,712
:mukn/glow/compiler/typecheck/stx-prop1,0
(def (set-is-type stx t)set-is-type19,442
(def (get-is-type stx) (hash-get is-type-table stx))get-is-type24,543
(def (track-is-type old new)track-is-type28,693
(def (set-has-typing-scheme stx ts)set-has-typing-scheme35,927
(def (get-has-typing-scheme stx) (hash-get has-typing-scheme-table stx))get-has-typing-scheme40,1068
(def (track-has-typing-scheme old new)track-has-typing-scheme44,1249
(def (make-has-type-table) (make-hash-table))make-has-type-table50,1492
(def current-has-type-table (make-parameter (make-has-type-table)))current-has-type-table51,1538
(def (set-has-type! e t)set-has-type!52,1606
(def (get-has-type e)get-has-type54,1691

compiler/typecheck/t/typecheck-test.ss,458
#!/usr/bin/env gxi:mukn/glow/compiler/typecheck/t/typecheck-test1,0
(def (typedecl-file dapp-name)typedecl-file27,712
(def (env->sexpr env)env->sexpr31,836
(def (print-env-sexpr s)print-env-sexpr53,1572
(def (typecheck-display prog expected-env expect-failure?)typecheck-display59,1838
(def (try-typecheck-files dapp-names)try-typecheck-files86,2762
(def (try-typecheck-all)try-typecheck-all105,3507
(def typecheck-testtypecheck-test109,3601

compiler/typecheck/type.ss,9898
(export #t):mukn/glow/compiler/typecheck/type1,0
(defstruct type:name (sym) transparent: #t)  ;; TODO: add srcloctype:name::t20,490
(defstruct type:name (sym) transparent: #t)  ;; TODO: add srcloctype:name?20,490
(defstruct type:name (sym) transparent: #t)  ;; TODO: add srclocmake-type:name20,490
(defstruct type:name (sym) transparent: #t)  ;; TODO: add srcloctype:name-sym20,490
(defstruct type:name (sym) transparent: #t)  ;; TODO: add srcloctype:name-sym-set!20,490
(defstruct type:name (sym) transparent: #t)  ;; TODO: add srcloctype:name20,490
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype::t21,555
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype?21,555
(defstruct type:name-subtype (sym super) transparent: #t)make-type:name-subtype21,555
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype-sym21,555
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype-super21,555
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype-sym-set!21,555
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype-super-set!21,555
(defstruct type:name-subtype (sym super) transparent: #t)type:name-subtype21,555
(defstruct type:var (sym) transparent: #t)type:var::t22,613
(defstruct type:var (sym) transparent: #t)type:var?22,613
(defstruct type:var (sym) transparent: #t)make-type:var22,613
(defstruct type:var (sym) transparent: #t)type:var-sym22,613
(defstruct type:var (sym) transparent: #t)type:var-sym-set!22,613
(defstruct type:var (sym) transparent: #t)type:var22,613
(defstruct type:app (fun args) transparent: #t)type:app::t23,656
(defstruct type:app (fun args) transparent: #t)type:app?23,656
(defstruct type:app (fun args) transparent: #t)make-type:app23,656
(defstruct type:app (fun args) transparent: #t)type:app-fun23,656
(defstruct type:app (fun args) transparent: #t)type:app-args23,656
(defstruct type:app (fun args) transparent: #t)type:app-fun-set!23,656
(defstruct type:app (fun args) transparent: #t)type:app-args-set!23,656
(defstruct type:app (fun args) transparent: #t)type:app23,656
(defstruct type:tuple (args) transparent: #t)type:tuple::t24,704
(defstruct type:tuple (args) transparent: #t)type:tuple?24,704
(defstruct type:tuple (args) transparent: #t)make-type:tuple24,704
(defstruct type:tuple (args) transparent: #t)type:tuple-args24,704
(defstruct type:tuple (args) transparent: #t)type:tuple-args-set!24,704
(defstruct type:tuple (args) transparent: #t)type:tuple24,704
(defstruct type:record (field-args))type:record::t25,750
(defstruct type:record (field-args))type:record?25,750
(defstruct type:record (field-args))make-type:record25,750
(defstruct type:record (field-args))type:record-field-args25,750
(defstruct type:record (field-args))type:record-field-args-set!25,750
(defstruct type:record (field-args))type:record25,750
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow::t26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow?26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)make-type:arrow26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow-in-tys26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow-out-ty26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow-in-tys-set!26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow-out-ty-set!26,787
(defstruct type:arrow (in-tys out-ty) transparent: #t)type:arrow26,787
(def (type? v)type?27,842
(def (tvp+ t) [#f t]) ; covarianttvp+43,1342
(def (tvp- t) [t #f]) ; contravarianttvp-44,1376
(defstruct ptype:union (types) transparent: #t)ptype:union::t58,2050
(defstruct ptype:union (types) transparent: #t)ptype:union?58,2050
(defstruct ptype:union (types) transparent: #t)make-ptype:union58,2050
(defstruct ptype:union (types) transparent: #t)ptype:union-types58,2050
(defstruct ptype:union (types) transparent: #t)ptype:union-types-set!58,2050
(defstruct ptype:union (types) transparent: #t)ptype:union58,2050
(defstruct ntype:intersection (types) transparent: #t)ntype:intersection::t59,2098
(defstruct ntype:intersection (types) transparent: #t)ntype:intersection?59,2098
(defstruct ntype:intersection (types) transparent: #t)make-ntype:intersection59,2098
(defstruct ntype:intersection (types) transparent: #t)ntype:intersection-types59,2098
(defstruct ntype:intersection (types) transparent: #t)ntype:intersection-types-set!59,2098
(defstruct ntype:intersection (types) transparent: #t)ntype:intersection59,2098
(def (ptype? v) (or (type? v) (ptype:union? v)))ptype?61,2154
(def (ntype? v) (or (type? v) (ntype:intersection? v)))ntype?62,2203
(def ptype:bottom (ptype:union []))ptype:bottom64,2260
(def ntype:top (ntype:intersection []))ntype:top65,2296
(def (ptype:bottom? v) (and (ptype:union? v) (null? (ptype:union-types v))))ptype:bottom?66,2336
(def (ntype:top? v) (and (ntype:intersection? v) (null? (ntype:intersection-types v))))ntype:top?67,2413
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme::t79,3019
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme?79,3019
(defstruct typing-scheme (menv type) transparent: #t)make-typing-scheme79,3019
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme-menv79,3019
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme-type79,3019
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme-menv-set!79,3019
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme-type-set!79,3019
(defstruct typing-scheme (menv type) transparent: #t)typing-scheme79,3019
(defstruct type-info (variances methods) transparent: #t)type-info::t85,3247
(defstruct type-info (variances methods) transparent: #t)type-info?85,3247
(defstruct type-info (variances methods) transparent: #t)make-type-info85,3247
(defstruct type-info (variances methods) transparent: #t)type-info-variances85,3247
(defstruct type-info (variances methods) transparent: #t)type-info-methods85,3247
(defstruct type-info (variances methods) transparent: #t)type-info-variances-set!85,3247
(defstruct type-info (variances methods) transparent: #t)type-info-methods-set!85,3247
(defstruct type-info (variances methods) transparent: #t)type-info85,3247
(def (make-type-info-table) (make-hash-table-eq))make-type-info-table88,3349
(def current-type-info-table (make-parameter (make-type-info-table)))current-type-info-table91,3457
(def (copy-current-type-info-table) (hash-copy (current-type-info-table)))copy-current-type-info-table94,3579
(def (type-name-variances name)type-name-variances97,3708
(def (type-name-methods name)type-name-methods101,3854
(def (add-type-info! name info)add-type-info!108,4172
(def type:Unit (type:tuple []))type:Unit118,4679
(def type:Empty-Record (type:record empty-symdict))type:Empty-Record119,4711
(def empty-methods (typing-scheme empty-symdict type:Empty-Record))empty-methods120,4763
(def empty-type-info (type-info [] empty-methods))empty-type-info121,4831
(def (add-empty-type-info! name) (add-type-info! name empty-type-info))add-empty-type-info!122,4882
(def type:Int (type:name 'Int))type:Int124,4955
(def type:Nat (type:name-subtype 'Nat type:Int))type:Nat125,4987
(def type:Bool (type:name 'Bool))type:Bool126,5036
(def type:Bytes (type:name 'Bytes))type:Bytes127,5070
(def type:Participant (type:name 'Participant))type:Participant129,5107
(def type:Digest (type:name 'Digest))type:Digest130,5155
(def type:Assets (type:name 'Assets))type:Assets131,5193
(def type:Signature (type:name 'Signature))type:Signature132,5231
(def typector:listof (type:name 'listof))typector:listof137,5431
(def (type:listof t) (type:app typector:listof [(tvp+ t)]))type:listof140,5537
(def (type:listof? t)type:listof?141,5597
(def (type:listof-elem t)type:listof-elem145,5695
(def (type-join a b)type-join155,5997
(def (types-join ts)types-join176,6681
(def (type-meet a b)type-meet186,6984
(def (types-meet ts)types-meet207,7750
(def (menv-meet as bs)menv-meet216,7976
(def (menvs-meet menvs)menvs-meet225,8313
(def (type-closed? t) (null? (type-vars t)))type-closed?231,8496
(def (type-vars t)type-vars234,8581
(def (type-variance-pair-vars tvp)type-variance-pair-vars254,9262
(def (type-has-var? t x)type-has-var?258,9389
(def (type-variance-pair-has-var? tvp x)type-variance-pair-has-var?280,10042
(def (type-subst tyvars t)type-subst285,10193
(def (type-variance-pair-subst tyvars tvp)type-variance-pair-subst315,11142
(def (typing-scheme-subst tyvars ts)typing-scheme-subst320,11320
(def (typing-scheme-neg-pos-var-sets ts)typing-scheme-neg-pos-var-sets332,11733
(def (type-neg-pos-var-sets t)type-neg-pos-var-sets340,12089
(def (tvp-neg-pos-var-sets tvp)tvp-neg-pos-var-sets369,13342
(def ((flow-edge? neg) pos)flow-edge?376,13613
(def (typing-scheme-simplify ts)typing-scheme-simplify380,13734
(def (print-typing-scheme ts)print-typing-scheme407,14755
(def (typing-schemes-join ts)typing-schemes-join420,15176
(def (typing-scheme/menv menv1 ts)typing-scheme/menv425,15386
(def (type->sexpr t)type->sexpr433,15659
(def (type-variance-pair->sexpr tvp)type-variance-pair->sexpr451,16491
(def (type->string t) (format "~y" (type->sexpr t)))type->string461,16762
(def (type->repr-sexpr t)type->repr-sexpr465,16910
(def (type-variance-pair->repr-sexpr tvp)type-variance-pair->repr-sexpr481,17840
(def (repr-sexpr->type s)repr-sexpr->type487,18037
(def (repr-sexpr->type-variance-pair tvp)repr-sexpr->type-variance-pair503,18958
(def (typing-scheme->repr-sexpr ts)typing-scheme->repr-sexpr508,19131
(def (repr-sexpr->typing-scheme s)repr-sexpr->typing-scheme516,19426

compiler/typecheck/typecheck.ss,2786
(export typecheck:mukn/glow/compiler/typecheck/typecheck1,0
(defstruct entry:unknown (part) transparent: #t)entry:unknown::t188,7185
(defstruct entry:unknown (part) transparent: #t)entry:unknown?188,7185
(defstruct entry:unknown (part) transparent: #t)make-entry:unknown188,7185
(defstruct entry:unknown (part) transparent: #t)entry:unknown-part188,7185
(defstruct entry:unknown (part) transparent: #t)entry:unknown-part-set!188,7185
(defstruct entry:unknown (part) transparent: #t)entry:unknown188,7185
(defstruct entry:known (part ts) transparent: #t)entry:known::t189,7234
(defstruct entry:known (part ts) transparent: #t)entry:known?189,7234
(defstruct entry:known (part ts) transparent: #t)make-entry:known189,7234
(defstruct entry:known (part ts) transparent: #t)entry:known-part189,7234
(defstruct entry:known (part ts) transparent: #t)entry:known-ts189,7234
(defstruct entry:known (part ts) transparent: #t)entry:known-part-set!189,7234
(defstruct entry:known (part ts) transparent: #t)entry:known-ts-set!189,7234
(defstruct entry:known (part ts) transparent: #t)entry:known189,7234
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor::t190,7284
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor?190,7284
(defstruct entry:ctor (part ts) transparent: #t)make-entry:ctor190,7284
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor-part190,7284
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor-ts190,7284
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor-part-set!190,7284
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor-ts-set!190,7284
(defstruct entry:ctor (part ts) transparent: #t)entry:ctor190,7284
(defstruct entry:type (part params type) transparent: #t)entry:type::t191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type?191,7333
(defstruct entry:type (part params type) transparent: #t)make-entry:type191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type-part191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type-params191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type-type191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type-part-set!191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type-params-set!191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type-type-set!191,7333
(defstruct entry:type (part params type) transparent: #t)entry:type191,7333
(def (read-type-env-file file)read-type-env-file273,10773
(def (write-type-env env (port (current-output-port)))write-type-env282,11129
(def (type-env=? a b)type-env=?301,11767
(def (typecheck module unused-table)typecheck692,29083

compiler/typecheck/variance.ss,1388
(export #t):mukn/glow/compiler/typecheck/variance1,0
(defstruct variance (covariant? contravariant?) transparent: #t)variance::t4,53
(defstruct variance (covariant? contravariant?) transparent: #t)variance?4,53
(defstruct variance (covariant? contravariant?) transparent: #t)make-variance4,53
(defstruct variance (covariant? contravariant?) transparent: #t)variance-covariant?4,53
(defstruct variance (covariant? contravariant?) transparent: #t)variance-contravariant?4,53
(defstruct variance (covariant? contravariant?) transparent: #t)variance-covariant?-set!4,53
(defstruct variance (covariant? contravariant?) transparent: #t)variance-contravariant?-set!4,53
(defstruct variance (covariant? contravariant?) transparent: #t)variance4,53
(def irrelevant    (variance #t #t)) ; bottom, ignoredirrelevant5,118
(def covariant     (variance #t #f))covariant6,173
(def contravariant (variance #f #t))contravariant7,210
(def invariant     (variance #f #f)) ; top, constrainedinvariant8,247
(def (variance-irrelevant? v)variance-irrelevant?10,346
(def (variance-invariant? v)variance-invariant?13,479
(def (variance-join a b)variance-join18,685
(def (variance-compose a b)variance-compose26,1029
(def (variance-flip v)variance-flip33,1274
(def (variance->repr-sexpr v)variance->repr-sexpr40,1453
(def (repr-sexpr->variance s)repr-sexpr->variance50,1818

contacts/db.ss,1010
;;;; Glow contacts database routines.:mukn/glow/contacts/db1,0
(def contact-db #f)contact-db28,952
(def (ensure-contact-db! path: (path #f) reopen: (reopen? #f))ensure-contact-db!35,1155
(def (close-contact-db!)close-contact-db!48,1768
(def (list-assets)list-assets188,6997
(def (list-networks)list-networks195,7263
(def (list-contacts (cid #f))list-contacts199,7387
(define-edit-command (add-identity cid identity)add-identity227,8527
(define-edit-command (add-contact name identities)add-contact231,8663
(define-edit-command (delete-identity-by-address cid network address)delete-identity-by-address246,9314
(define-edit-command (delete-identity-by-nickname nickname)delete-identity-by-nickname252,9599
(define-edit-command (delete-contact cid)delete-contact256,9782
(define-edit-command (delete-contact-by-name name)delete-contact-by-name260,9944
(define-edit-command (update-contact cid name identities)update-contact264,10144
(def (get-identities cid)get-identities275,10610

contacts/keys.ss,546
;;;; Only encrypted secret keys are stored in the database.:mukn/glow/contacts/keys1,0
(def global-key #f)global-key12,256
(def (global-key-path)global-key-path13,276
(def secret-key-cipher cipher::aes-256-ctr)secret-key-cipher19,532
(def secret-key-cipherssecret-key-ciphers22,616
(def (read-random-bytes n-bytes)read-random-bytes30,906
(def (ensure-global-key!)ensure-global-key!36,1135
(def (encrypt-secret-key secret-key)encrypt-secret-key55,1995
(def (decrypt-secret-key cipher-name iv secret-key)decrypt-secret-key65,2410

contacts/server.ss,2225
;;;; HTTP/JSON endpoints for contact & identity management.:mukn/glow/contacts/server1,0
(def wwwroot (xdg-config-home "glow" "wwwroot"))wwwroot19,559
(def index.html (path-expand "index.html" wwwroot))index.html21,609
;;;; HTTP/JSON endpoints for contact & identity management.index.html::endpoint1,0
(def (index.html/GET)index.html/GET24,697
(def (request-static-file? req (path (http-request-path req)))request-static-file?27,763
;;;; HTTP/JSON endpoints for contact & identity management.static-file::endpoint1,0
(define static-file/GET http-response-static-file*)static-file/GET34,986
(def (respond/no-content)respond/no-content36,1039
(def (respond/JSON code: (code 200) json)respond/JSON39,1102
(def (respond/JSON-error code: (code 400) error (other-info ()))respond/JSON-error48,1543
(def (http-request-body-json*)http-request-body-json*58,1924
;;;; HTTP/JSON endpoints for contact & identity management.list-assets::endpoint1,0
(def (list-assets/GET)list-assets/GET66,2204
;;;; HTTP/JSON endpoints for contact & identity management.list-networks::endpoint1,0
(def (list-networks/GET)list-networks/GET71,2356
;;;; HTTP/JSON endpoints for contact & identity management.list-contacts::endpoint1,0
(def (list-contacts/GET)list-contacts/GET76,2493
;;;; HTTP/JSON endpoints for contact & identity management.contact::endpoint1,0
(def (contact/GET)contact/GET83,2667
(def (contact/POST)contact/POST87,2771
;;;; HTTP/JSON endpoints for contact & identity management.contact-by-id::endpoint1,0
(def (contact-by-id/GET cid)contact-by-id/GET99,3210
(def (contact-by-id/POST cid)contact-by-id/POST107,3520
(def (contact-by-id/PUT cid)contact-by-id/PUT119,3966
(def (contact-by-id/DELETE cid)contact-by-id/DELETE130,4381
;;;; HTTP/JSON endpoints for contact & identity management.run-transaction::endpoint1,0
(def (run-transaction/GET)run-transaction/GET139,4669
(def (run-transaction/POST)run-transaction/POST143,4792
;;;; HTTP/JSON endpoints for contact & identity management.transaction-by-id::endpoint1,0
(def (transaction-by-id/GET txid)transaction-by-id/GET160,5452
(define-entry-point (start-server address: (address #f) port: (port #f))start-server174,6070

contacts/transactions.ss,227
;;;; Glow transactions.:mukn/glow/contacts/transactions1,0
(def (check-txid! txid)check-txid!19,310
(def (start-transaction action args)start-transaction199,8493
(def (transaction-output txid)transaction-output209,8927

main.ss,67
#!/usr/bin/env gxi:mukn/glow/main1,0
#!/usr/bin/env gximain1,0

path-config.ss,39
(export #t):mukn/glow/path-config1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/all-glow.ssi,46
prelude: :gerbil/core:mukn/glow/all-glow1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/all-glow.ssxi.ss,60
prelude: :gerbil/compiler/ssxi:mukn/glow/all-glow.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/haskell-types/client.ssi,66
prelude: :gerbil/core:mukn/glow/cardano/haskell-types/client1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/haskell-types/client.ssxi.ss,80
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/haskell-types/client.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/haskell-types/data.ssi,64
prelude: :gerbil/core:mukn/glow/cardano/haskell-types/data1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/haskell-types/data.ssxi.ss,78
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/haskell-types/data.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/haskell-types/transaction.ssi,71
prelude: :gerbil/core:mukn/glow/cardano/haskell-types/transaction1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/haskell-types/transaction.ssxi.ss,85
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/haskell-types/transaction.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/plutus.ssi,52
prelude: :gerbil/core:mukn/glow/cardano/plutus1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/plutus.ssxi.ss,66
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/plutus.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/poo-extensions.ssi,60
prelude: :gerbil/core:mukn/glow/cardano/poo-extensions1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/poo-extensions.ssxi.ss,74
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/poo-extensions.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/smart-contract-backend.ssi,68
prelude: :gerbil/core:mukn/glow/cardano/smart-contract-backend1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/smart-contract-backend.ssxi.ss,82
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/smart-contract-backend.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/util.ssi,50
prelude: :gerbil/core:mukn/glow/cardano/util1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/util.ssxi.ss,64
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/util.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/wallet.ssi,490
prelude: :gerbil/core:mukn/glow/cardano/wallet1,0
                   walletwallet65,2481
         (%#define-syntax address |mukn/glow/cardano/wallet[:0:]#address|)address91,3735
         (%#define-syntax payment |mukn/glow/cardano/wallet[:0:]#payment|)payment119,4987
         (%#define-syntax amount |mukn/glow/cardano/wallet[:0:]#amount|)amount136,5798
          payment-keyspayment-keys194,8291
         (%#define-syntax key |mukn/glow/cardano/wallet[:0:]#key|)key213,9151

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cardano/wallet.ssxi.ss,66
prelude: :gerbil/compiler/ssxi:mukn/glow/cardano/wallet.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/contacts.ssi,50
prelude: :gerbil/core:mukn/glow/cli/contacts1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/contacts.ssxi.ss,64
prelude: :gerbil/compiler/ssxi:mukn/glow/cli/contacts.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/ethereum.ssi,50
prelude: :gerbil/core:mukn/glow/cli/ethereum1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/ethereum.ssxi.ss,64
prelude: :gerbil/compiler/ssxi:mukn/glow/cli/ethereum.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/identities.ssi,52
prelude: :gerbil/core:mukn/glow/cli/identities1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/identities.ssxi.ss,66
prelude: :gerbil/compiler/ssxi:mukn/glow/cli/identities.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/interaction.ssi,53
prelude: :gerbil/core:mukn/glow/cli/interaction1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/interaction.ssxi.ss,67
prelude: :gerbil/compiler/ssxi:mukn/glow/cli/interaction.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/utils.ssi,47
prelude: :gerbil/core:mukn/glow/cli/utils1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/cli/utils.ssxi.ss,61
prelude: :gerbil/compiler/ssxi:mukn/glow/cli/utils.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/alpha-convert.ssi,74
prelude: :gerbil/core:mukn/glow/compiler/alpha-convert/alpha-convert1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/alpha-convert.ssxi.ss,88
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/alpha-convert/alpha-convert.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/at-prefix-normalize.ssi,80
prelude: :gerbil/core:mukn/glow/compiler/alpha-convert/at-prefix-normalize1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/at-prefix-normalize.ssxi.ss,94
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/alpha-convert/at-prefix-normalize.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/env.ssi,221
prelude: :gerbil/core:mukn/glow/compiler/alpha-convert/env1,0
                   entryentry52,2171
          entry-valentry-val64,2626
          entry-ctorentry-ctor76,3076
          entry-typeentry-type88,3528

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/env.ssxi.ss,78
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/alpha-convert/env.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/fresh.ssi,66
prelude: :gerbil/core:mukn/glow/compiler/alpha-convert/fresh1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/fresh.ssxi.ss,80
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/alpha-convert/fresh.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/symbolnat.ssi,70
prelude: :gerbil/core:mukn/glow/compiler/alpha-convert/symbolnat1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/alpha-convert/symbolnat.ssxi.ss,84
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/alpha-convert/symbolnat.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/anf/anf.ssi,54
prelude: :gerbil/core:mukn/glow/compiler/anf/anf1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/anf/anf.ssxi.ss,68
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/anf/anf.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/checkpointify/checkpoint-info-table.ssi,82
prelude: :gerbil/core:mukn/glow/compiler/checkpointify/checkpoint-info-table1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/checkpointify/checkpoint-info-table.ssxi.ss,96
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/checkpointify/checkpoint-info-table.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/checkpointify/checkpointify.ssi,160
prelude: :gerbil/core:mukn/glow/compiler/checkpointify/checkpointify1,0
                   titi82,3287
          cici127,5279
          ssissi229,10217

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/checkpointify/checkpointify.ssxi.ss,88
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/checkpointify/checkpointify.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/common.ssi,107
prelude: :gerbil/core:mukn/glow/compiler/common1,0
                   cond/comparecond/compare110,4724

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/common.ssxi.ss,67
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/common.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/debug-label/debug-label.ssi,70
prelude: :gerbil/core:mukn/glow/compiler/debug-label/debug-label1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/debug-label/debug-label.ssxi.ss,84
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/debug-label/debug-label.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/desugar/desugar.ssi,62
prelude: :gerbil/core:mukn/glow/compiler/desugar/desugar1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/desugar/desugar.ssxi.ss,76
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/desugar/desugar.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/liveness/checkpoint-liveness.ssi,75
prelude: :gerbil/core:mukn/glow/compiler/liveness/checkpoint-liveness1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/liveness/checkpoint-liveness.ssxi.ss,89
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/liveness/checkpoint-liveness.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/method-resolve/method-resolve.ssi,76
prelude: :gerbil/core:mukn/glow/compiler/method-resolve/method-resolve1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/method-resolve/method-resolve.ssxi.ss,90
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/method-resolve/method-resolve.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/multipass.ssi,317
prelude: :gerbil/core:mukn/glow/compiler/multipass1,0
                   layerlayer47,1645
          define-layerdefine-layer56,1977
         (%#define-syntax pass |mukn/glow/compiler/multipass[:0:]#pass|)pass78,2962
          define-passdefine-pass86,3275
          define-strategydefine-strategy98,3715

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/multipass.ssxi.ss,70
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/multipass.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/parse/expressions.ssi,3462
prelude: :gerbil/core:mukn/glow/compiler/parse/expressions1,0
                   expressionexpression24,799
          statementstatement36,1264
          binary-expressionbinary-expression69,2689
          OperatorOperator72,2816
          identifieridentifier90,3508
          literalliteral111,4285
          boolean-literalboolean-literal123,4761
          numeric-literalnumeric-literal135,5253
          string-literalstring-literal147,5739
          tuple-expressiontuple-expression168,6604
          argumentsarguments195,7657
          unary-expressionunary-expression228,9026
          exponentiation-expressionexponentiation-expression243,9697
          multiplicative-expressionmultiplicative-expression258,10404
          additive-expressionadditive-expression276,11206
          shift-expressionshift-expression291,11835
          relational-expressionrelational-expression306,12482
          equality-expressionequality-expression321,13137
          bitwise-and-expressionbitwise-and-expression336,13802
          bitwise-xor-expressionbitwise-xor-expression351,14477
          bitwise-or-expressionbitwise-or-expression366,15146
          logical-and-expressionlogical-and-expression381,15817
          logical-or-expressionlogical-or-expression396,16486
          attributeattribute429,17827
          call-expressioncall-expression456,18976
          require-expressionrequire-expression474,19758
          assert-expressionassert-expression489,20389
          deposit-expressiondeposit-expression516,21562
          withdraw-expressionwithdraw-expression543,22753
          expression-with-attributeexpression-with-attribute570,24044
          dot-expressiondot-expression597,25195
          list-expressionlist-expression615,25977
          typetype631,26623
          type-with-attributetype-with-attribute655,27677
          type-nametype-name673,28373
          type-vartype-var691,29039
          type-tupletype-tuple709,29731
          type-recordtype-record727,30461
          type-annotation-expressiontype-annotation-expression769,32305
          record-expressionrecord-expression797,33543
          patternpattern815,34219
          pattern-with-attributepattern-with-attribute839,35317
          type-annotation-patterntype-annotation-pattern863,36455
          pattern-idpattern-id881,37169
          pattern-blankpattern-blank893,37639
          pattern-litpattern-lit911,38347
          pattern-tuplepattern-tuple929,39075
          pattern-orpattern-or947,39777
          pattern-listpattern-list965,40493
          pattern-recordpattern-record983,41245
          pattern-app-ctorpattern-app-ctor1007,42269
          body-expressionbody-expression1064,44564
          if-expressionif-expression1097,45965
          switch-expressionswitch-expression1124,47148
          casecase1149,48113
          publish-statementpublish-statement1178,49390
          verify-statementverify-statement1199,50271
          type-alias-declarationtype-alias-declaration1235,51939
          data-type-declarationdata-type-declaration1268,53528
          expression-statementexpression-statement1292,54582
          value-definitionvalue-definition1325,56043
          function-definitionfunction-definition1364,57830
          paramparam1393,58999
          statement-with-attributestatement-with-attribute1418,60222

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/parse/expressions.ssxi.ss,78
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/parse/expressions.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/parse/lexical.ssi,110
prelude: :gerbil/core:mukn/glow/compiler/parse/lexical1,0
                   lex-tokenslex-tokens226,9810

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/parse/lexical.ssxi.ss,74
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/parse/lexical.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/parse/parse.ssi,58
prelude: :gerbil/core:mukn/glow/compiler/parse/parse1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/parse/parse.ssxi.ss,72
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/parse/parse.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/participantify/participantify.ssi,76
prelude: :gerbil/core:mukn/glow/compiler/participantify/participantify1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/participantify/participantify.ssxi.ss,90
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/participantify/participantify.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/passes.ssi,53
prelude: :gerbil/core:mukn/glow/compiler/passes1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/passes.ssxi.ss,67
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/passes.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/project/project.ssi,62
prelude: :gerbil/core:mukn/glow/compiler/project/project1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/project/project.ssxi.ss,76
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/project/project.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/project/runtime-2.ssi,64
prelude: :gerbil/core:mukn/glow/compiler/project/runtime-21,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/project/runtime-2.ssxi.ss,78
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/project/runtime-2.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/syntax-context.ssi,61
prelude: :gerbil/core:mukn/glow/compiler/syntax-context1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/syntax-context.ssxi.ss,75
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/syntax-context.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/stx-prop.ssi,65
prelude: :gerbil/core:mukn/glow/compiler/typecheck/stx-prop1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/stx-prop.ssxi.ss,79
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/typecheck/stx-prop.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/type.ssi,547
prelude: :gerbil/core:mukn/glow/compiler/typecheck/type1,0
                   type:nametype:name34,1135
          type:name-subtypetype:name-subtype58,2166
          type:vartype:var76,2834
          type:apptype:app100,3714
          type:tupletype:tuple118,4388
          type:recordtype:record136,5100
          type:arrowtype:arrow160,6034
          ptype:unionptype:union181,6944
          ntype:intersectionntype:intersection199,7708
          typing-schemetyping-scheme237,9258
          type-infotype-info261,10198

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/type.ssxi.ss,75
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/typecheck/type.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/typecheck.ssi,239
prelude: :gerbil/core:mukn/glow/compiler/typecheck/typecheck1,0
          entry:unknownentry:unknown159,6923
          entry:knownentry:known183,7891
          entry:ctorentry:ctor207,8841
          entry:typeentry:type237,10053

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/typecheck.ssxi.ss,80
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/typecheck/typecheck.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/variance.ssi,110
prelude: :gerbil/core:mukn/glow/compiler/typecheck/variance1,0
                   variancevariance31,1205

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/compiler/typecheck/variance.ssxi.ss,79
prelude: :gerbil/compiler/ssxi:mukn/glow/compiler/typecheck/variance.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/db.ssi,49
prelude: :gerbil/core:mukn/glow/contacts/db1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/db.ssxi.ss,63
prelude: :gerbil/compiler/ssxi:mukn/glow/contacts/db.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/keys.ssi,51
prelude: :gerbil/core:mukn/glow/contacts/keys1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/keys.ssxi.ss,65
prelude: :gerbil/compiler/ssxi:mukn/glow/contacts/keys.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/server.ssi,53
prelude: :gerbil/core:mukn/glow/contacts/server1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/server.ssxi.ss,67
prelude: :gerbil/compiler/ssxi:mukn/glow/contacts/server.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/transactions.ssi,59
prelude: :gerbil/core:mukn/glow/contacts/transactions1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/contacts/transactions.ssxi.ss,73
prelude: :gerbil/compiler/ssxi:mukn/glow/contacts/transactions.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/main.ss,181
#!/nix/store/sf7v48ldvnw1c8xh51d4c271w7n5v36r-gerbil-unstable-2021-06-08/bin/gxi:main1,0
#!/nix/store/sf7v48ldvnw1c8xh51d4c271w7n5v36r-gerbil-unstable-2021-06-08/bin/gximain1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/path-config.ssi,49
prelude: :gerbil/core:mukn/glow/path-config1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/path-config.ssxi.ss,63
prelude: :gerbil/compiler/ssxi:mukn/glow/path-config.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/block-ctx.ssi,55
prelude: :gerbil/core:mukn/glow/runtime/block-ctx1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/block-ctx.ssxi.ss,69
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/block-ctx.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/consensus-code-generator.ssi,70
prelude: :gerbil/core:mukn/glow/runtime/consensus-code-generator1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/consensus-code-generator.ssxi.ss,84
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/consensus-code-generator.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/context.ssi,53
prelude: :gerbil/core:mukn/glow/runtime/context1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/context.ssxi.ss,67
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/context.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/glow-path.ssi,55
prelude: :gerbil/core:mukn/glow/runtime/glow-path1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/glow-path.ssxi.ss,69
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/glow-path.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/participant-runtime.ssi,65
prelude: :gerbil/core:mukn/glow/runtime/participant-runtime1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/participant-runtime.ssxi.ss,79
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/participant-runtime.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/program.ssi,53
prelude: :gerbil/core:mukn/glow/runtime/program1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/program.ssxi.ss,67
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/program.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/reify-contract-parameters.ssi,71
prelude: :gerbil/core:mukn/glow/runtime/reify-contract-parameters1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/reify-contract-parameters.ssxi.ss,85
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/reify-contract-parameters.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/terminal-codes.ssi,60
prelude: :gerbil/core:mukn/glow/runtime/terminal-codes1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/runtime/terminal-codes.ssxi.ss,74
prelude: :gerbil/compiler/ssxi:mukn/glow/runtime/terminal-codes.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/t/common.ssi,46
prelude: :gerbil/core:mukn/glow/t/common1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/t/common.ssxi.ss,60
prelude: :gerbil/compiler/ssxi:mukn/glow/t/common.ssxi1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/version.ssi,45
prelude: :gerbil/core:mukn/glow/version1,0

../../../nix/store/ah6w6zbxr5myb271nnpfgz46jrsyf1fs-glow-lang-unstable-2021-09-07/gerbil/lib/mukn/glow/version.ssxi.ss,59
prelude: :gerbil/compiler/ssxi:mukn/glow/version.ssxi1,0

runtime/block-ctx.ss,187
(export #t):mukn/glow/runtime/block-ctx1,0
(define-type BlockCtxBlockCtx12,313
(define-type PassiveBlockCtxPassiveBlockCtx51,1762
(define-type ActiveBlockCtxActiveBlockCtx66,2314

runtime/consensus-code-generator.ss,1819
(export #t):mukn/glow/runtime/consensus-code-generator1,0
(define-type ConsensusCodeGeneratorConsensusCodeGenerator11,341
(define-type StaticBlockCtxStaticBlockCtx78,3576
(def (&define-commit-contract-call/simple self)&define-commit-contract-call/simple149,7004
(def (&define-small-functions self small-functions)&define-small-functions188,8584
(def (&define-medium-functions self)&define-medium-functions213,9828
(def (generate-consensus-code-block self code-block-label code-block)generate-consensus-code-block222,10276
(def (make-checkpoint-label name checkpoint)make-checkpoint-label237,11043
(def (compile-consensus-statement self function-name statement)compile-consensus-statement243,11276
(def (find-other-participant self participant)find-other-participant306,14280
(def (typed-directive<-trivial-expr self function-name expr)typed-directive<-trivial-expr314,14574
(def (compile-consensus-expression self function-name expression)compile-consensus-expression319,14809
(def (lookup-variable-offset self function-name variable-name)lookup-variable-offset383,16737
(def (load-immediate-variable self function-name variable-name variable-type)load-immediate-variable388,17034
(def (add-local-variable-to-frame self function-name variable-name)add-local-variable-to-frame398,17496
(def (add-temporary-variable-offset self function-name variable-name)add-temporary-variable-offset410,18184
(def (trivial-expression self function-name expr)trivial-expression423,18902
(def (setup-tail-call self code-block-label code-block)setup-tail-call439,19746
(def (compute-variable-offsets self code-block-label)compute-variable-offsets473,21308
(def (cartesian-product . lol) (cartesian-product* lol))cartesian-product490,22172
(def (cartesian-product* lol)cartesian-product*495,22430

runtime/context.ss,64
(export:mukn/glow/runtime/context1,0
(dummies new)new16,322

runtime/glow-path.ss,1021
(export #t):mukn/glow/runtime/glow-path1,0
(def glow-install-path (source-path))glow-install-path9,272
(def glow-path #f)glow-path10,310
(def glow-dapps #f)glow-dapps11,329
(def (default-glow-path)default-glow-path13,350
(def (initialize-glow-path! (user-provided #f))initialize-glow-path!17,498
(def (for-each-dapp-file f extension: (extension ".glow"))for-each-dapp-file22,686
(def (find-dapp-files extension: (extension ".glow") filter: (filter true))find-dapp-files29,1084
(def (initialize-glow-dapps!)initialize-glow-dapps!38,1316
(def (ensure-glow-dapps)ensure-glow-dapps41,1386
(def (get-glow-app-names)get-glow-app-names45,1473
(def options/glow-pathoptions/glow-path48,1551
(define-entry-point (list-applications)list-applications54,1892
(define-entry-point (show-glow-path)show-glow-path60,2174
(def (find-dapp-path path)find-dapp-path65,2311
(def (find-dapp-file dapp (extension ".glow"))find-dapp-file70,2486
(define-entry-point ($default-glow-path)$default-glow-path74,2654

runtime/participant-runtime.ss,3320
(export #t):mukn/glow/runtime/participant-runtime1,0
(define-type Tokens (MonomorphicObject Nat))Tokens23,1399
(define-type AgreementOptionsAgreementOptions25,1445
(define-type InteractionAgreementInteractionAgreement32,1712
(define-type AgreementHandshakeAgreementHandshake44,2724
(define-type IOContextIOContext51,3030
(def (split-interaction-path-name interaction-str)split-interaction-path-name57,3289
(def (delete-agreement-handshake)delete-agreement-handshake62,3518
(def (special-file:handshake) (transient-path "agreement-handshake.json"))special-file:handshake67,3700
(def (handshake-timeout-in-seconds) (* 15 (ethereum-timeout-in-blocks)))handshake-timeout-in-seconds68,3775
(.def io-context:special-fileio-context:special-file70,3849
(define-type RuntimeRuntime95,4844
(def (execute self)execute158,7982
(def (execute-1 self)execute-1173,8469
(def (update-contract-balances self)update-contract-balances185,8829
(def (is-active-participant self)is-active-participant201,9409
(def (watch self)watch212,10052
(def (run-passive-code-block/contract self role contract-config)run-passive-code-block/contract227,10756
(def (interpret-current-code-block self)interpret-current-code-block252,11839
(def (run-passive-code-block/handshake self role)run-passive-code-block/handshake259,12168
(def (run-passive-code-block self)run-passive-code-block288,13521
(def (read-handshake self)read-handshake296,13807
(def (run-active-code-block self)run-active-code-block304,14080
(def (approve-deposits self contract-address)approve-deposits341,15684
(def (native-asset-deposit self)native-asset-deposit352,16110
(def (sexp<-state state) (map (match <> ([t . v] (sexp<- t v))) state))sexp<-state363,16457
(def (add-to-environment self name value)add-to-environment367,16617
(def (prepare-create-contract-transaction self)prepare-create-contract-transaction371,16743
(def (deploy-contract self)deploy-contract390,17422
(def (send-contract-handshake self handshake)send-contract-handshake431,19491
(def (publish-frame-data self out)publish-frame-data438,19732
(def (prepare-call-function-transaction self contract-address out)prepare-call-function-transaction452,20230
(def (get-current-code-block self)get-current-code-block463,20789
(def (initialize-environment self)initialize-environment471,21143
(def (reduce-expression self expression)reduce-expression493,22374
(def (get-active-participant self)get-active-participant512,22929
(def (marshal-product-f fields)marshal-product-f517,23081
(def (marshal-product-to fields port)marshal-product-to521,23234
(def (digest-product-f fields)digest-product-f526,23375
(def (interpret-participant-statement self statement)interpret-participant-statement530,23486
(def (interpret-participant-expression self expression)interpret-participant-expression594,26142
(def (frame-variables/consecutive-addresses start end items)frame-variables/consecutive-addresses699,29535
(def (check-consecutive-addresses start end names types addresses)check-consecutive-addresses709,29991
(def (create-frame-variables self timer-start code-block-label code-block-participant)create-frame-variables726,30663
(def (interaction-input t s)interaction-input750,31897
(def (json-object-ref j k)json-object-ref764,32426

runtime/program.ss,1015
(export #t):mukn/glow/runtime/program1,0
(def Interaction (Map CodeBlock <- Symbol))Interaction13,392
(define-type InteractionInfoInteractionInfo15,437
(def SExp Any)SExp33,1035
(define-type ProgramProgram35,1051
(def (get-interaction self name participant)get-interaction62,2296
(def (lookup-type self variable-name)lookup-type70,2630
(def (lookup-surface-name self variable-name)lookup-surface-name86,3199
(def (lookup-live-variables self name code-block-label)lookup-live-variables91,3389
(define-type ParseContextParseContext101,3937
(def (add-statement self statement)add-statement113,4284
(define-type CodeBlockCodeBlock124,4718
(define-type SmallFunctionSmallFunction135,4983
(def (set-participant self new-participant)set-participant143,5159
(def (parse-compiler-output compiler-output)parse-compiler-output169,6782
(def (process-program initial-code-block-label name body)process-program210,8612
(def (get-last-code-block-label self name)get-last-code-block-label222,9111

runtime/reify-contract-parameters.ss,293
(export run run:terminal run:special-file run:command):mukn/glow/runtime/reify-contract-parameters1,0
(def (run:terminal role a)run:terminal87,3101
(def (run:command cmd role a)run:command90,3165
(def (run:special-file role a)run:special-file96,3328
(def (run ctx role a)run101,3539

runtime/t/consensus-code-generator-integrationtest.ss,284
(export #t):mukn/glow/runtime/t/consensus-code-generator-integrationtest1,0
(def consensus-code-generator-integrationtestconsensus-code-generator-integrationtest14,212
(def (check-scratch-space-example file-name interaction-name expected-value)check-scratch-space-example24,626

runtime/terminal-codes.ss,349
(export #t):mukn/glow/runtime/terminal-codes1,0
(def TTY (tty? (current-output-port)))TTY5,41
(def END (if TTY "\033[0m" ""))END6,80
(def BOLD (if TTY "\033[1m" ""))BOLD7,112
(def CYAN (if TTY "\033[96m" ""))CYAN8,145
(def MAGENTA (if TTY "\33[35m" ""))MAGENTA9,179
(def RED (if TTY "\033[91m" ""))RED10,215
(def FAIL RED)FAIL11,248

scripts/ci.ss,45
#!/usr/bin/env gxi:mukn/glow/scripts/ci1,0

t/asset-swap-integrationtest.ss,330
(export #t):mukn/glow/t/asset-swap-integrationtest1,0
(def a-address alice)a-address26,1016
(def b-address bob)b-address27,1038
(def gas-allowance (wei<-ether .01))gas-allowance28,1058
(def t (wei<-ether .01))t29,1095
(def u (wei<-ether .02))u30,1120
(def asset-swap-integrationtestasset-swap-integrationtest32,1146

t/buy-sig-integrationtest.ss,113
(export #t):mukn/glow/t/buy-sig-integrationtest1,0
(def buy-sig-integrationtestbuy-sig-integrationtest25,996

t/cli-integration-test.ss,386
(export #t):mukn/glow/t/cli-integration-test1,0
(def cli-integration-testcli-integration-test8,157
(def (check-answers input-lines answers output)check-answers60,2373
(def (check-environment input-lines output)check-environment70,2648
(def (check-parameters input-lines params output)check-parameters79,2906
(def (check-initial-block input output)check-initial-block89,3183

t/cli-integration.ss,371
(export:mukn/glow/t/cli-integration1,0
(def (with-io-port port fn)with-io-port17,430
(def (answer-questions q-and-as)answer-questions50,1507
(def (supply-parameters params)supply-parameters142,4507
(def (set-initial-block (offset 0))set-initial-block161,5032
(def (read-peer-command)read-peer-command172,5485
(def (read-environment)read-environment177,5675

t/coin-flip-integrationtest.ss,307
(export #t):mukn/glow/t/coin-flip-integrationtest1,0
(def a-address alice)a-address25,971
(def b-address bob)b-address26,993
(def wagerAmount (wei<-ether .5))wagerAmount27,1013
(def escrowAmount (wei<-ether .01))escrowAmount28,1047
(def coin-flip-integrationtestcoin-flip-integrationtest30,1084

t/common.ss,434
(export #t):mukn/glow/t/common1,0
(def (dapps-dir)dapps-dir17,386
(def (dapps.sexp)dapps.sexp21,462
(def (dapps.glow)dapps.glow27,670
(def (ppd x) (pretty-print (syntax->datum x)))ppd31,769
(def (ppdc x) (ppd (car x)))ppdc33,817
(define-entry-point (process . files)process35,847
(define-entry-point (process-to-pass pass . files)process-to-pass47,1497
(define-entry-point (digest-command file)digest-command58,2058

t/escrow-timeout-integrationtest.ss,187
(export #t):mukn/glow/t/escrow-timeout-integrationtest1,0
(def wagerAmount (wei<-ether 1))wagerAmount25,971
(def escrow-timeout-integrationtestescrow-timeout-integrationtest27,1005

t/rps-simple-integrationtest.ss,254
(export #t):mukn/glow/t/rps-simple-integrationtest1,0
(def a-address alice)a-address25,971
(def b-address bob)b-address26,993
(def wagerAmount (wei<-ether .01))wagerAmount27,1013
(def rps-simple-integrationtestrps-simple-integrationtest29,1049

version.ss,147
(import :clan/versioning :clan/version :clan/crypto/version :clan/poo/version :clan/persist/version :mukn/ethereum/version):mukn/glow/version1,0
